prompt,canonical_solution,generated_solution
"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
","
class TestHasCloseElements(unittest.TestCase):
    def test_has_close_elements_1(self):
        self.assertTrue(has_close_elements([1.0, 2.0, 3.0], 0.5))

    def test_has_close_elements_2(self):
        self.assertFalse(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))

    def test_has_close_elements_with_negative_numbers(self):
        self.assertTrue(has_close_elements([-1.0, -2.8, -3.0, -4.0, -5.0, -2.0], 0.3))

    def test_has_close_elements_with_zeroes(self):
        self.assertTrue(has_close_elements([1.0, 0.0, 3.0, 4.0, 5.0, 2.0], 0.3))

    def test_has_close_elements_with_duplicates(self):
        self.assertTrue(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0, 2.0], 0.3))

    def test_has_close_elements_with_duplicates_and_zeroes(self):
        self.assertTrue(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0, 2.0, 0.0], 0.3))

    def test_has_close_elements_with_duplicates_and_negative_numbers(self):
        self.assertTrue(has_close_elements([1.0, -2.8, 3.0, 4.0, 5.0, 2.0, -2.0], 0.3))

    def test_has_close_elements_with_duplicates_and_negative_numbers_and_zeroes(self):
        self.assertTrue(has_close_elements([1.0, -2.8, 3.0, 4.0, 5.0, 2.0, -2.0, 0.0], 0.3))

    def test_has_close_elements_with_duplicates_and_negative_numbers_and_zeroes_and_floats(self):
        self.assertTrue(has_close_elements([1.0, -2.8, 3.0, 4.0, 5.0, 2.0, -2.0, 0.0], 0.3))

    def test_has_close_elements_with_duplicates_and_negative_numbers_and_zeroes_and_floats_and_decimals(self):
        self.assertTrue(has_close_elements([1.0, -2.8, 3.0, 4.0, 5.0, 2.0, -2.0, 0.0], 0.3))

    def test_has_close_elements_with_duplicates_and_negative_numbers_and_zeroes_and_floats_and_decimals_and_threshold(self):
        self.assertTrue(has_close_elements([1.0, -2.8, 3.0, 4.0, 5.0, 2.0, -2.0, 0.0], 0.3))

    def test_has_close_elements_with_duplicates_and_negative_numbers_and_zeroes_and_floats_and_decimals_and_threshold_and_float(self):
        self.assertTrue(has_close_elements([1.0, -2.8, 3.0, 4.0, 5.0, 2.0, -2.0, 0.0], 0.3))"
"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","
class TestSeparateParenGroups:
    def test_empty_string(self):
        assert separate_paren_groups('') == []

    def test_single_group(self):
        assert separate_paren_groups('()') == ['()']

    def test_multiple_groups(self):
        assert separate_paren_groups('(()())') == ['()', '()()']

    def test_nested_groups(self):
        assert separate_paren_groups('((()))') == ['()', '()()']

    def test_mixed_groups(self):
        assert separate_paren_groups('(()()) (()())') == ['()', '()()', '()', '()()']

    def test_unbalanced_groups(self):
        with self.assertRaises(ValueError):
            separate_paren_groups('((()))(')

    def test_nested_unbalanced_groups(self):
        with self.assertRaises(ValueError):
            separate_paren_groups('(()()) (()()) (())')

    def test_mixed_unbalanced_groups(self):
        with self.assertRaises(ValueError):
            separate_paren_groups('((())) (()()) (()) (()')

    def test_spaces(self):
        assert separate_paren_groups('  ( )  ( (  ) )  ') == ['()', '()()']

    def test_mixed_spaces(self):
        assert separate_paren_groups('  ( )  ( (  ) )  ( () )') == ['()', '()()', '()']

    def test_nested_unbalanced_groups_with_spaces(self):
        with self.assertRaises(ValueError):
            separate_paren_groups('((())) (()()) (())  ')

    def test_mixed_unbalanced_groups_with_spaces(self):
        with self.assertRaises(ValueError):
            separate_paren_groups('((())) (()()) (()) (() )')
"
"

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """"""
","    return number % 1.0
","
import unittest


class TestTruncateNumber(unittest.TestCase):
    def test_truncate_number1(self):
        self.assertEqual(truncate_number(3.5), 0.5)
    def test_truncate_number2(self):
        self.assertEqual(truncate_number(1.2), 0.2)
    def test_truncate_number3(self):
        self.assertEqual(truncate_number(1.9), 0.9)
    def test_truncate_number4(self):
        self.assertEqual(truncate_number(3.7), 0.7)
    def test_truncate_number5(self):
        self.assertEqual(truncate_number(4.5), 0.5)
    def test_truncate_number6(self):
        self.assertEqual(truncate_number(12.8), 0.8)
    def test_truncate_number7(self):
        self.assertEqual(truncate_number(3.9), 0.9)
    def test_truncate_number8(self):
        self.assertEqual(truncate_number(4.7), 0.7)
    def test_truncate_number9(self):
        self.assertEqual(truncate_number(12.5), 0.5)
    def test_truncate_number10(self):
        self.assertEqual(truncate_number(3.8), 0.8)

"
"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","
class TestBelowZero(unittest.TestCase):
    def test_below_zero1(self):
        self.assertTrue(below_zero([1, 2, -4, 5]))
    def test_below_zero2(self):
        self.assertFalse(below_zero([1, 2, 3]))
    def test_below_zero3(self):
        self.assertFalse(below_zero([-1, -2, -3]))
    def test_below_zero4(self):
        self.assertFalse(below_zero([0, 0, 0]))
    def test_below_zero5(self):
        self.assertTrue(below_zero([1, 2, -4, 5, 6, -7, 8, -9, 10]))
    def test_below_zero6(self):
        self.assertFalse(below_zero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))
    def test_below_zero7(self):
        self.assertTrue(below_zero([1, 2, -4, 5, 6, -7, 8, -9, 10, -11]))
    def test_below_zero8(self):
        self.assertFalse(below_zero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]))
    def test_below_zero9(self):
        self.assertTrue(below_zero([1, 2, -4, 5, 6, -7, 8, -9, 10, -11, 12]))
    def test_below_zero10(self):
        self.assertFalse(below_zero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]))
    def test_below_zero11(self):
        self.assertTrue(below_zero([1, 2, -4, 5, 6, -7, 8, -9, 10, -11, 12, -13]))
    def test_below_zero12(self):
        self.assertFalse(below_zero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]))
"
"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","
class TestMeanAbsoluteDeviation(unittest.TestCase):
    def test_mean_absolute_deviation_1(self):
        self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]), 1.0)
    def test_mean_absolute_deviation_2(self):
        self.assertEqual(mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0]), 1.0)
    def test_mean_absolute_deviation_3(self):
        self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]), 1.0)
    def test_mean_absolute_deviation_4(self):
        self.assertEqual(mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0, -5.0]), 1.0)
    def test_mean_absolute_deviation_5(self):
        self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]), 1.0)
    def test_mean_absolute_deviation_6(self):
        self.assertEqual(mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0]), 1.0)
    def test_mean_absolute_deviation_7(self):
        self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]), 1.0)
    def test_mean_absolute_deviation_8(self):
        self.assertEqual(mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0, -7.0]), 1.0)
    def test_mean_absolute_deviation_9(self):
        self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), 1.0)
    def test_mean_absolute_deviation_10(self):
        self.assertEqual(mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0, -7.0, -8.0]), 1.0)

    def test_mean_absolute_deviation_empty(self):
        self.assertEqual(mean_absolute_deviation([]), 0.0)

    def test_mean_absolute_deviation_one_1(self):
        self.assertEqual(mean_absolute_deviation([1.0]), 0.0)
    def test_mean_absolute_deviation_one_2(self):
        self.assertEqual(mean_absolute_deviation([-1.0]), 0.0)

    def test_mean_absolute_deviation_two_1(self):
        self.assertEqual(mean_absolute_deviation([1.0, 2.0]), 0.5)
    def test_mean_absolute_deviation_two_2(self):
        self.assertEqual(mean_absolute_deviation([-1.0, -2.0]), 0.5)

    def test_mean_absolute_deviation_three_1(self):
        self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0]), 1.0 / 3)
    def test_mean_absolute_deviation_three_2(self):
        self.assertEqual(mean_absolute_deviation([-1.0, -2.0, -3.0]), 1.0 / 3)

    def test_mean_absolute_deviation_four_1(self):
        self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]), 1.0 / 4)
    def test_mean_absolute_deviation_four_2(self):
        self.assertEqual(mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0]), 1.0 / 4)

    def test_mean_absolute_deviation_five_1(self):
        self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]), 1.0 / 5)
    def test_mean_absolute_deviation_five_2(self):
        self.assertEqual(mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0, -5.0]), 1.0 / 5)"
"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","
class TestInterspersedList:
    def test_intersperse_empty_list(self):
        self.assertEqual([], intersperse([], 4))

    def test_intersperse_single_element_list(self):
        self.assertEqual([1], intersperse([1], 4))

    def test_intersperse_two_elements_list(self):
        self.assertEqual([1, 4, 2], intersperse([1, 2], 4))

    def test_intersperse_three_elements_list(self):
        self.assertEqual([1, 4, 2, 4, 3], intersperse([1, 2, 3], 4))

    def test_intersperse_four_elements_list(self):
        self.assertEqual([1, 4, 2, 4, 3, 4, 4], intersperse([1, 2, 3, 4], 4))

    def test_intersperse_five_elements_list(self):
        self.assertEqual([1, 4, 2, 4, 3, 4, 5], intersperse([1, 2, 3, 4, 5], 4))

    def test_intersperse_six_elements_list(self):
        self.assertEqual([1, 4, 2, 4, 3, 4, 5, 6], intersperse([1, 2, 3, 4, 5, 6], 4))

    def test_intersperse_seven_elements_list(self):
        self.assertEqual([1, 4, 2, 4, 3, 4, 5, 6, 7], intersperse([1, 2, 3, 4, 5, 6, 7], 4))

    def test_intersperse_eight_elements_list(self):
        self.assertEqual([1, 4, 2, 4, 3, 4, 5, 6, 7, 8], intersperse([1, 2, 3, 4, 5, 6, 7, 8], 4))

    def test_intersperse_nine_elements_list(self):
        self.assertEqual([1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9], intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))

    def test_intersperse_ten_elements_list(self):
        self.assertEqual([1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10], intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))

    def test_intersperse_eleven_elements_list(self):
        self.assertEqual([1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11], intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4))

    def test_intersperse_twelve_elements_list(self):
        self.assertEqual([1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 4))"
"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","
class TestParseNestedParens:
    def test_parse_nested_parens_1(self):
        self.assertEqual([2, 3, 1, 3], parse_nested_parens('(()()) ((())) () ((())()())'))
    def test_parse_nested_parens_2(self):
        self.assertEqual([0, 1, 0, 1], parse_nested_parens('() (()) () (())'))
    def test_parse_nested_parens_3(self):
        self.assertEqual([2, 2, 2, 3], parse_nested_parens('((())) ((())) ((())) ((()))'))
    def test_parse_nested_parens_4(self):
        self.assertEqual([0, 0, 0, 1], parse_nested_parens('() () () (())'))
    def test_parse_nested_parens_5(self):
        self.assertEqual([0, 0, 0, 2], parse_nested_parens('() () () ((()))'))
    def test_parse_nested_parens_6(self):
        self.assertEqual([0, 0, 0, 3], parse_nested_parens('() () () ((())) ((()))'))
    def test_parse_nested_parens_7(self):
        self.assertEqual([1, 1, 1, 2], parse_nested_parens('(()) (()) (()) ((()))'))
    def test_parse_nested_parens_8(self):
        self.assertEqual([0, 0, 0, 4], parse_nested_parens('() () () ((())) ((())) ((())) ((()))'))
    def test_parse_nested_parens_9(self):
        self.assertEqual([1, 2, 3, 4], parse_nested_parens('(()) (((())))) ((((())))) (((((())))))'))
    def test_parse_nested_parens_10(self):
        self.assertEqual([0, 0, 0, 5], parse_nested_parens('() () () ((())) ((())) ((())) ((())) ((()))'))

    def test_parse_nested_parens_empty(self):
        self.assertEqual([], parse_nested_parens(''))

    def test_parse_nested_parens_single(self):
        self.assertEqual([0], parse_nested_parens('()'))

    def test_parse_nested_parens_multiple(self):
        self.assertEqual([1, 2], parse_nested_parens('(()()) (((())))))'))

    def test_parse_nested_parens_mixed(self):
        self.assertEqual([0, 1, 0, 1], parse_nested_parens('() (()) () (())'))

    def test_parse_nested_parens_invalid(self):
        with self.assertRaises(ValueError):
            parse_nested_parens('(()))')

    def test_parse_nested_parens_invalid2(self):
        with self.assertRaises(ValueError):
            parse_nested_parens('((())))')

    def test_parse_nested_parens_invalid3(self):
        with self.assertRaises(ValueError):
            parse_nested_parens('(())) (())')

    def test_parse_nested_parens_invalid4(self):
        with self.assertRaises(ValueError):
            parse_nested_parens('((()))) ((()))')

    def test_parse_nested_parens_invalid5(self):
        with self.assertRaises(ValueError):
            parse_nested_parens('(())) (()) () (())'))

    def test_parse_nested_parens_invalid6(self):
        with self.assertRaises(ValueError):
            parse_nested_parens('((()))) ((())) ((())) ((()))'))

    def test_parse_nested_parens_invalid7(self):
        with self.assertRaises(ValueError):
            parse_nested_parens('(()) (()) (()) ((()))'))

    def test_parse_nested_parens_invalid8(self):
        with self.assertRaises(ValueError):
            parse_nested_parens('((()))) ((())) ((())) ((())) ((()))'))

    def test_parse_nested_parens_invalid9(self):
        with self.assertRaises(ValueError):
            parse_nested_parens('(()) (()) (()) ((())) ((())) ((())) ((()))'))

    def test_parse_nested_parens_invalid10(self):
        with self.assertRaises(ValueError):
            parse_nested_parens('((()))) ((())) ((())) ((())) ((())) ((()))'))"
"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","    return [x for x in strings if substring in x]
","
class TestFilterBySubstring(unittest.TestCase):
    def test_empty_list(self):
        self.assertEqual([], filter_by_substring([], 'a'))

    def test_single_element_list(self):
        self.assertEqual(['abc'], filter_by_substring(['abc'], 'a'))

    def test_multiple_elements_list(self):
        self.assertEqual(['abc', 'bacd', 'array'], filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))

    def test_no_matching_element(self):
        self.assertEqual([], filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z'))

    def test_empty_substring(self):
        with self.assertRaises(ValueError) as context:
            filter_by_substring(['abc', 'bacd', 'cde', 'array'], '')
        self.assertTrue('Empty substring' in str(context.exception))

    def test_substring_with_spaces(self):
        with self.assertRaises(ValueError) as context:
            filter_by_substring(['abc', 'bacd', 'cde', 'array'], ' a ')
        self.assertTrue('Spaces in substring' in str(context.exception))

    def test_substring_with_special_characters(self):
        with self.assertRaises(ValueError) as context:
            filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a!')
        self.assertTrue('Special characters in substring' in str(context.exception))

    def test_substring_with_numbers(self):
        with self.assertRaises(ValueError) as context:
            filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a1')
        self.assertTrue('Numbers in substring' in str(context.exception))

    def test_substring_with_uppercase_letters(self):
        with self.assertRaises(ValueError) as context:
            filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'A')
        self.assertTrue('Uppercase letters in substring' in str(context.exception))

    def test_substring_with_lowercase_letters(self):
        with self.assertRaises(ValueError) as context:
            filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
        self.assertTrue('Lowercase letters in substring' in str(context.exception))

    def test_substring_with_mixed_case_letters(self):
        with self.assertRaises(ValueError) as context:
            filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'Aa')
        self.assertTrue('Mixed case letters in substring' in str(context.exception))

    def test_substring_with_unicode_characters(self):
        with self.assertRaises(ValueError) as context:
            filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a😀')
        self.assertTrue('Unicode characters in substring' in str(context.exception))

    def test_substring_with_non_ascii_characters(self):
        with self.assertRaises(ValueError) as context:
            filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a\u0142')
        self.assertTrue('Non-ASCII characters in substring' in str(context.exception))

    def test_substring_with_non_ascii_characters_in_unicode_string(self):
        with self.assertRaises(ValueError) as context:
            filter_by_substring(['abc', 'bacd', 'cde', 'array'], '\u0142')
        self.assertTrue('Non-ASCII characters in substring' in str(context.exception))
"
"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","
import unittest
from typing import List, Tuple


class TestSumProduct(unittest.TestCase):
    def test_sum_product_1(self):
        self.assertEqual((0, 1), sum_product([]))
    def test_sum_product_2(self):
        self.assertEqual((10, 24), sum_product([1, 2, 3, 4]))
    def test_sum_product_3(self):
        self.assertEqual((-5, -6), sum_product([-1, -2, -3, -4]))
    def test_sum_product_4(self):
        self.assertEqual((10, 24), sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
    def test_sum_product_5(self):
        self.assertEqual((-10, -24), sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))
    def test_sum_product_6(self):
        self.assertEqual((10, 24), sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))
    def test_sum_product_7(self):
        self.assertEqual((-10, -24), sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]))
    def test_sum_product_8(self):
        self.assertEqual((10, 24), sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))
    def test_sum_product_9(self):
        self.assertEqual((-10, -24), sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]))
    def test_sum_product_10(self):
        self.assertEqual((10, 24), sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))
    def test_sum_product_11(self):
        self.assertEqual((-10, -24), sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17]))
    def test_sum_product_12(self):
        self.assertEqual((10, 24), sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))
    def test_sum_product_13(self):
        self.assertEqual((-10, -24), sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18]))
    def test_sum_product_14(self):
        self.assertEqual((10, 24), sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))
    def test_sum_product_15(self):
        self.assertEqual((-10, -24), sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))"
"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","
class TestRollingMax:
    def test_empty_list(self):
        self.assertEqual([], rolling_max([]))

    def test_single_element(self):
        self.assertEqual([1], rolling_max([1]))

    def test_two_elements(self):
        self.assertEqual([1, 2], rolling_max([1, 2]))

    def test_three_elements(self):
        self.assertEqual([1, 2, 3], rolling_max([1, 2, 3]))

    def test_four_elements(self):
        self.assertEqual([1, 2, 3, 4], rolling_max([1, 2, 3, 4]))

    def test_five_elements(self):
        self.assertEqual([1, 2, 3, 4, 5], rolling_max([1, 2, 3, 4, 5]))

    def test_six_elements(self):
        self.assertEqual([1, 2, 3, 4, 5, 6], rolling_max([1, 2, 3, 4, 5, 6]))

    def test_seven_elements(self):
        self.assertEqual([1, 2, 3, 4, 5, 6, 7], rolling_max([1, 2, 3, 4, 5, 6, 7]))

    def test_eight_elements(self):
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8], rolling_max([1, 2, 3, 4, 5, 6, 7, 8]))

    def test_nine_elements(self):
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9], rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]))

    def test_ten_elements(self):
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

    def test_eleven_elements(self):
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))

    def test_twelve_elements(self):
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))

    def test_thirteen_elements(self):
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))

    def test_fourteen_elements(self):
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))"
"

def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","
import unittest


class TestPalindrome(unittest.TestCase):

    def test_make_palindrome(self):
        self.assertEqual(make_palindrome(''), '')
    def test_make_palindrome_1(self):
        self.assertEqual(make_palindrome('a'), 'a')
    def test_make_palindrome_2(self):
        self.assertEqual(make_palindrome('aa'), 'aa')
    def test_make_palindrome_3(self):
        self.assertEqual(make_palindrome('ab'), 'aba')
    def test_make_palindrome_4(self):
        self.assertEqual(make_palindrome('cata'), 'catac')
    def test_make_palindrome_5(self):
        self.assertEqual(make_palindrome('abcba'), 'abcbaa')
    def test_make_palindrome_6(self):
        self.assertEqual(make_palindrome('abcbaa'), 'abcbaaa')
    def test_make_palindrome_7(self):
        self.assertEqual(make_palindrome('abcbaab'), 'abcbaaba')
    def test_make_palindrome_8(self):
        self.assertEqual(make_palindrome('abcbaabba'), 'abcbaabba')
    def test_make_palindrome_9(self):
        self.assertEqual(make_palindrome('abcbaaba'), 'abcbaaba')
    def test_make_palindrome_10(self):
        self.assertEqual(make_palindrome('abcbaaaa'), 'abcbaaaaa')
    def test_make_palindrome_11(self):
        self.assertEqual(make_palindrome('abcbaaaaa'), 'abcbaaaaa')
    def test_make_palindrome_12(self):
        self.assertEqual(make_palindrome('abcbaabbb'), 'abcbaabbbb')
    def test_make_palindrome_13(self):
        self.assertEqual(make_palindrome('abcbaabbba'), 'abcbaabbbaa')
    def test_make_palindrome_14(self):
        self.assertEqual(make_palindrome('abcbaabbbaa'), 'abcbaabbbaa')
    def test_make_palindrome_15(self):
        self.assertEqual(make_palindrome('abcbaabbbabb'), 'abcbaabbbabba')
    def test_make_palindrome_16(self):
        self.assertEqual(make_palindrome('abcbaabbbabba'), 'abcbaabbbabba')
    def test_make_palindrome_17(self):
        self.assertEqual(make_palindrome('abcbaabbbabbba'), 'abcbaabbbabbbaa')
    def test_make_palindrome_18(self):
        self.assertEqual(make_palindrome('abcbaabbbabbbaa'), 'abcbaabbbabbbaa')
    def test_make_palindrome_19(self):
        self.assertEqual(make_palindrome('abcbaabbbabbbaba'), 'abcbaabbbabbbabba')
    def test_make_palindrome_20(self):
        self.assertEqual(make_palindrome('abcbaabbbabbbabba'), 'abcbaabbbabbbabba')
    def test_make_palindrome_21(self):
        self.assertEqual(make_palindrome('abcbaabbbabbbabbba'), 'abcbaabbbabbbabbbaa')
    def test_make_palindrome_22(self):
        self.assertEqual(make_palindrome('abcbaabbbabbbabbbaa'), 'abcbaabbbabbbabbbaa')
    def test_make_palindrome_23(self):
        self.assertEqual(make_palindrome('abcbaabbbabbbabbbaba'), 'abcbaabbbabbbabbbabba')
    def test_make_palindrome_24(self):
        self.assertEqual(make_palindrome('abcbaabbbabbbabbbabba'), 'abcbaabbbabbbabbbabba')
    def test_make_palindrome_25(self):
        self.assertEqual(make_palindrome('abcbaabbbabbbabbbabbba'), 'abcbaabbbabbbabbbabbbaa')
    def test_make_palindrome_26(self):
        self.assertEqual(make_palindrome('abcbaabbbabbbabbbabbbaa'), 'abcbaabbbabbbabbbabbbaa')
    def test_make_palindrome_27(self):
        self.assertEqual(make_palindrome('abcbaabbbabbbabbbabbbaba'), 'abcbaabbbabbbabbbabbbabba')
    def test_make_palindrome_28(self):
        self.assertEqual(make_palindrome('abcbaabbbabbbabbbabbbabba'), 'abcbaabbbabbbabbbabbbabba')

"
"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","
class TestStringXOR(unittest.TestCase):
    def test_string_xor_1(self):
        self.assertEqual('100', string_xor('010', '110'))

    def test_string_xor_2(self):
        self.assertEqual('000', string_xor('000', '000'))

    def test_string_xor_3(self):
        self.assertEqual('111', string_xor('111', '111'))

    def test_string_xor_4(self):
        self.assertEqual('110', string_xor('110', '000'))

    def test_string_xor_5(self):
        self.assertEqual('011', string_xor('000', '111'))

    def test_string_xor_6(self):
        self.assertEqual('101', string_xor('101', '010'))

    def test_string_xor_7(self):
        self.assertEqual('010', string_xor('010', '101'))

    def test_string_xor_8(self):
        self.assertEqual('111', string_xor('111', '000'))

    def test_string_xor_9(self):
        self.assertEqual('000', string_xor('000', '111'))

    def test_string_xor_10(self):
        self.assertEqual('110', string_xor('110', '000'))

    def test_string_xor_11(self):
        self.assertEqual('011', string_xor('000', '111'))

"
"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","
import unittest
from typing import List, Optional


class TestLongest(unittest.TestCase):
    def test_empty(self):
        self.assertIsNone(longest([]))

    def test_one(self):
        self.assertEqual('a', longest(['a']))

    def test_two(self):
        self.assertEqual('b', longest(['a', 'b']))

    def test_three(self):
        self.assertEqual('ccc', longest(['a', 'bb', 'ccc']))

    def test_four(self):
        self.assertEqual('aaa', longest(['aaa', 'bbb', 'ccc']))

    def test_five(self):
        self.assertEqual('aaa', longest(['aaa', 'aaa', 'aaa']))

    def test_six(self):
        self.assertEqual('aaa', longest(['aaa', 'bbb', 'ccc', 'ddd']))

    def test_seven(self):
        self.assertEqual('aaa', longest(['aaa', 'aaa', 'aaa', 'aaa']))

    def test_eight(self):
        self.assertEqual('aaa', longest(['aaa', 'bbb', 'ccc', 'ddd', 'eee']))

    def test_nine(self):
        self.assertEqual('aaa', longest(['aaa', 'aaa', 'aaa', 'aaa', 'aaa']))

    def test_ten(self):
        self.assertEqual('aaa', longest(['aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa']))
"
"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","    while b:
        a, b = b, a % b
    return a
","
import unittest


class TestGreatestCommonDivisor(unittest.TestCase):
    def test_greatest_common_divisor_1(self):
        self.assertEqual(greatest_common_divisor(3, 5), 1)
    def test_greatest_common_divisor_2(self):
        self.assertEqual(greatest_common_divisor(25, 15), 5)
    def test_greatest_common_divisor_3(self):
        self.assertEqual(greatest_common_divisor(4, 6), 2)
    def test_greatest_common_divisor_4(self):
        self.assertEqual(greatest_common_divisor(30, 18), 6)
    def test_greatest_common_divisor_5(self):
        self.assertEqual(greatest_common_divisor(5, 7), 1)
    def test_greatest_common_divisor_6(self):
        self.assertEqual(greatest_common_divisor(24, 12), 4)
    def test_greatest_common_divisor_7(self):
        self.assertEqual(greatest_common_divisor(30, 6), 6)
    def test_greatest_common_divisor_8(self):
        self.assertEqual(greatest_common_divisor(5, 7), 1)
    def test_greatest_common_divisor_9(self):
        self.assertEqual(greatest_common_divisor(24, 12), 4)
    def test_greatest_common_divisor_10(self):
        self.assertEqual(greatest_common_divisor(30, 6), 6)
    def test_greatest_common_divisor_11(self):
        self.assertEqual(greatest_common_divisor(5, 7), 1)
    def test_greatest_common_divisor_12(self):
        self.assertEqual(greatest_common_divisor(24, 12), 4)
    def test_greatest_common_divisor_13(self):
        self.assertEqual(greatest_common_divisor(30, 6), 6)

"
"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","
class TestAllPrefixes:
    def test_all_prefixes_empty(self):
        self.assertEqual(all_prefixes(''), [])

    def test_all_prefixes_one_char(self):
        self.assertEqual(all_prefixes('a'), ['a'])

    def test_all_prefixes_two_chars(self):
        self.assertEqual(all_prefixes('aa'), ['a', 'aa'])

    def test_all_prefixes_three_chars(self):
        self.assertEqual(all_prefixes('abc'), ['a', 'ab', 'abc'])

    def test_all_prefixes_four_chars(self):
        self.assertEqual(all_prefixes('abcd'), ['a', 'ab', 'abc', 'abcd'])

    def test_all_prefixes_five_chars(self):
        self.assertEqual(all_prefixes('abcde'), ['a', 'ab', 'abc', 'abcd', 'abcde'])

    def test_all_prefixes_six_chars(self):
        self.assertEqual(all_prefixes('abcdef'), ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef'])

    def test_all_prefixes_seven_chars(self):
        self.assertEqual(all_prefixes('abcdefg'), ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg'])

    def test_all_prefixes_eight_chars(self):
        self.assertEqual(all_prefixes('abcdefgh'), ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh'])

    def test_all_prefixes_nine_chars(self):
        self.assertEqual(all_prefixes('abcdefghi'), ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi'])

    def test_all_prefixes_ten_chars(self):
        self.assertEqual(all_prefixes('abcdefghij'), ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'])

    def test_all_prefixes_eleven_chars(self):
        self.assertEqual(all_prefixes('abcdefghijk'), ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk'])
"
"

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","
import unittest


class TestStringSequence(unittest.TestCase):
    def test_string_sequence_1(self):
        self.assertEqual(string_sequence(0), '0')
    def test_string_sequence_2(self):
        self.assertEqual(string_sequence(5), '0 1 2 3 4 5')
    def test_string_sequence_3(self):
        self.assertEqual(string_sequence(-1), '')
    def test_string_sequence_4(self):
        self.assertEqual(string_sequence(10), '0 1 2 3 4 5 6 7 8 9 10')
    def test_string_sequence_5(self):
        self.assertEqual(string_sequence(100), '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100')
    def test_string_sequence_6(self):
        self.assertEqual(string_sequence(-10), '')
"
"

def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","    return len(set(string.lower()))
","
import unittest


class TestCountDistinctCharacters(unittest.TestCase):
    def test_count_distinct_characters_1(self):
        self.assertEqual(count_distinct_characters('xyzXYZ'), 3)
    def test_count_distinct_characters_2(self):
        self.assertEqual(count_distinct_characters('Jerry'), 4)
    def test_count_distinct_characters_3(self):
        self.assertEqual(count_distinct_characters(''), 0)
    def test_count_distinct_characters_4(self):
        self.assertEqual(count_distinct_characters('a'), 1)
    def test_count_distinct_characters_5(self):
        self.assertEqual(count_distinct_characters('A'), 1)
    def test_count_distinct_characters_6(self):
        self.assertEqual(count_distinct_characters('abcd'), 4)
    def test_count_distinct_characters_7(self):
        self.assertEqual(count_distinct_characters('abcde'), 5)
    def test_count_distinct_characters_8(self):
        self.assertEqual(count_distinct_characters('abcdefghijklmnopqrstuvwxyz'), 26)
    def test_count_distinct_characters_9(self):
        self.assertEqual(count_distinct_characters('ABCDEFGHIJKLMNOPQRSTUVWXYZ'), 26)
    def test_count_distinct_characters_10(self):
        self.assertEqual(count_distinct_characters('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'), 52)
    def test_count_distinct_characters_11(self):
        self.assertEqual(count_distinct_characters('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'), 62)


"
"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","
class TestParseMusic(unittest.TestCase):
    def test_parse_music(self):
        self.assertEqual(parse_music('o o| .| o| o| .| .| .| .| o o'), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])

    def test_parse_music(self):
        self.assertEqual(parse_music('o o| .| o| o| .| .| .| .| o o'), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])

    def test_parse_music(self):
        self.assertEqual(parse_music('o o| .| o| o| .| .| .| .| o o'), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])

    def test_parse_music(self):
        self.assertEqual(parse_music('o o| .| o| o| .| .| .| .| o o'), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])

    def test_parse_music(self):
        self.assertEqual(parse_music('o o| .| o| o| .| .| .| .| o o'), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])

    def test_parse_music(self):
        self.assertEqual(parse_music('o o| .| o| o| .| .| .| .| o o'), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])

    def test_parse_music(self):
        self.assertEqual(parse_music('o o| .| o| o| .| .| .| .| o o'), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])

    def test_parse_music(self):
        self.assertEqual(parse_music('o o| .| o| o| .| .| .| .| o o'), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])

    def test_parse_music(self):
        self.assertEqual(parse_music('o o| .| o| o| .| .| .| .| o o'), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])

    def test_parse_music(self):
        self.assertEqual(parse_music('o o| .| o| o| .| .| .| .| o o'), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])

    def test_parse_music(self):
        self.assertEqual(parse_music('o o| .| o| o| .| .| .| .| o o'), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])

    def test_parse_music(self):
        self.assertEqual(parse_music('o o| .| o| o| .| .| .| .| o o'), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])

    def test_parse_music(self):
        self.assertEqual(parse_music('o o| .| o| o| .| .| .| .| o o'), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])

"
"

def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","
import unittest


class TestHowManyTimes(unittest.TestCase):
    def test_how_many_times_1(self):
        self.assertEqual(how_many_times('', 'a'), 0)
    def test_how_many_times_2(self):
        self.assertEqual(how_many_times('aaa', 'a'), 3)
    def test_how_many_times_3(self):
        self.assertEqual(how_many_times('aaaa', 'aa'), 3)
    def test_how_many_times_4(self):
        self.assertEqual(how_many_times('abcd', 'bc'), 1)
    def test_how_many_times_5(self):
        self.assertEqual(how_many_times('abcde', 'bcd'), 1)
    def test_how_many_times_6(self):
        self.assertEqual(how_many_times('abcdefg', 'cde'), 1)
    def test_how_many_times_7(self):
        self.assertEqual(how_many_times('abcdefghijklmnopqrstuvwxyz', 'bcdefghijklmnopqrstuvwxy'), 2)
    def test_how_many_times_8(self):
        self.assertEqual(how_many_times('abcdefghijklmnopqrstuvwxyz', 'cde'), 1)
    def test_how_many_times_9(self):
        self.assertEqual(how_many_times('abcdefghijklmnopqrstuvwxyz', 'bcdefghijklmnopqrstuvwxy'), 2)
    def test_how_many_times_10(self):
        self.assertEqual(how_many_times('abcdefghijklmnopqrstuvwxyz', 'cde'), 1)
    def test_how_many_times_11(self):
        self.assertEqual(how_many_times('abcdefghijklmnopqrstuvwxyz', 'bcdefghijklmnopqrstuvwxy'), 2)

    def test_how_many_times_with_empty_string(self):
        self.assertEqual(how_many_times('', 'a'), 0)

    def test_how_many_times_with_one_char_string_1(self):
        self.assertEqual(how_many_times('a', 'a'), 1)
    def test_how_many_times_with_one_char_string_2(self):
        self.assertEqual(how_many_times('b', 'a'), 0)

    def test_how_many_times_with_two_chars_string_1(self):
        self.assertEqual(how_many_times('aa', 'a'), 2)
    def test_how_many_times_with_two_chars_string_2(self):
        self.assertEqual(how_many_times('ab', 'a'), 1)
    def test_how_many_times_with_two_chars_string_3(self):
        self.assertEqual(how_many_times('ba', 'a'), 0)
    def test_how_many_times_with_two_chars_string_4(self):
        self.assertEqual(how_many_times('bb', 'a'), 0)

    def test_how_many_times_with_three_chars_string_1(self):
        self.assertEqual(how_many_times('aaa', 'a'), 3)
    def test_how_many_times_with_three_chars_string_2(self):
        self.assertEqual(how_many_times('aba', 'a'), 2)
    def test_how_many_times_with_three_chars_string_3(self):
        self.assertEqual(how_many_times('baa', 'a'), 1)
    def test_how_many_times_with_three_chars_string_4(self):
        self.assertEqual(how_many_times('bbb', 'a'), 0)

    def test_how_many_times_with_four_chars_string_1(self):
        self.assertEqual(how_many_times('aaaa', 'aa'), 3)
    def test_how_many_times_with_four_chars_string_2(self):
        self.assertEqual(how_many_times('abaa', 'aa'), 2)
    def test_how_many_times_with_four_chars_string_3(self):
        self.assertEqual(how_many_times('baaa', 'aa'), 1)
    def test_how_many_times_with_four_chars_string_4(self):
        self.assertEqual(how_many_times('bbaa', 'aa'), 0)

    def test_how_many_times_with_five_chars_string_1(self):
        self.assertEqual(how_many_times('aaaaa', 'aa'), 4)
    def test_how_many_times_with_five_chars_string_2(self):
        self.assertEqual(how_many_times('abaaa', 'aa'), 3)
    def test_how_many_times_with_five_chars_string_3(self):
        self.assertEqual(how_many_times('baaaa', 'aa'), 2)
    def test_how_many_times_with_five_chars_string_4(self):
        self.assertEqual(how_many_times('bbaaa', 'aa'), 0)

    def test_how_many_times_with_six_chars_string_1(self):
        self.assertEqual(how_many_times('aaaaaa', 'aa'), 5)
    def test_how_many_times_with_six_chars_string_2(self):
        self.assertEqual(how_many_times('abaaaa', 'aa'), 4)
    def test_how_many_times_with_six_chars_string_3(self):
        self.assertEqual(how_many_times('baaaab', 'aa'), 3)
    def test_how_many_times_with_six_chars_string_4(self):
        self.assertEqual(how_many_times('bbaaac', 'aa'), 0)"
"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","
class TestSortNumbers(unittest.TestCase):
    def test_sort_numbers_1(self):
        self.assertEqual(sort_numbers('three one five'), 'one three five')
    def test_sort_numbers_2(self):
        self.assertEqual(sort_numbers('zero one two three four five six seven eight nine'), 'zero one two three four five six seven eight nine')
    def test_sort_numbers_3(self):
        self.assertEqual(sort_numbers('nine eight seven six five four three two one zero'), 'zero one two three four five six seven eight nine')
    def test_sort_numbers_4(self):
        self.assertEqual(sort_numbers('one two three four five six seven eight nine'), 'one two three four five six seven eight nine')
    def test_sort_numbers_5(self):
        self.assertEqual(sort_numbers('nine eight seven six five four three two one zero'), 'zero one two three four five six seven eight nine')
    def test_sort_numbers_6(self):
        self.assertEqual(sort_numbers('three one five'), 'one three five')
    def test_sort_numbers_7(self):
        self.assertEqual(sort_numbers('zero one two three four five six seven eight nine'), 'zero one two three four five six seven eight nine')
    def test_sort_numbers_8(self):
        self.assertEqual(sort_numbers('nine eight seven six five four three two one zero'), 'zero one two three four five six seven eight nine')
    def test_sort_numbers_9(self):
        self.assertEqual(sort_numbers('one two three four five six seven eight nine'), 'one two three four five six seven eight nine')
    def test_sort_numbers_10(self):
        self.assertEqual(sort_numbers('nine eight seven six five four three two one zero'), 'zero one two three four five six seven eight nine')
    def test_sort_numbers_11(self):
        self.assertEqual(sort_numbers('three one five'), 'one three five')
    def test_sort_numbers_12(self):
        self.assertEqual(sort_numbers('zero one two three four five six seven eight nine'), 'zero one two three four five six seven eight nine')
    def test_sort_numbers_13(self):
        self.assertEqual(sort_numbers('nine eight seven six five four three two one zero'), 'zero one two three four five six seven eight nine')
    def test_sort_numbers_14(self):
        self.assertEqual(sort_numbers('one two three four five six seven eight nine'), 'one two three four five six seven eight nine')
    def test_sort_numbers_15(self):
        self.assertEqual(sort_numbers('nine eight seven six five four three two one zero'), 'zero one two three four five six seven eight nine')
    def test_sort_numbers_16(self):
        self.assertEqual(sort_numbers('three one five'), 'one three five')
    def test_sort_numbers_17(self):
        self.assertEqual(sort_numbers('zero one two three four five six seven eight nine'), 'zero one two three four five six seven eight nine')
    def test_sort_numbers_18(self):
        self.assertEqual(sort_numbers('nine eight seven six five four three two one zero'), 'zero one two three four five six seven eight nine')
    def test_sort_numbers_19(self):
        self.assertEqual(sort_numbers('one two three four five six seven eight nine'), 'one two three four five six seven eight nine')
    def test_sort_numbers_20(self):
        self.assertEqual(sort_numbers('nine eight seven six five four three two one zero'), 'zero one two three four five six seven eight nine')
    def test_sort_numbers_21(self):
        self.assertEqual(sort_numbers('three one five'), 'one three five')
"
"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","
import unittest
from typing import List, Tuple


class TestFindClosestElements(unittest.TestCase):
    def test_find_closest_elements_1(self):
        self.assertEqual((2.0, 2.2), find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))
    def test_find_closest_elements_2(self):
        self.assertEqual((2.0, 2.0), find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))
    def test_find_closest_elements_3(self):
        self.assertEqual((-1.0, 1.0), find_closest_elements([-1.0, -2.0, -3.0, -4.0, -5.0, 1.0]))
    def test_find_closest_elements_4(self):
        self.assertEqual((-1.0, 1.0), find_closest_elements([1.0, -2.0, -3.0, -4.0, -5.0, -1.0]))
    def test_find_closest_elements_5(self):
        self.assertEqual((-1.0, 1.0), find_closest_elements([-1.0, 1.0, -2.0, -3.0, -4.0, -5.0]))
    def test_find_closest_elements_6(self):
        self.assertEqual((-1.0, 1.0), find_closest_elements([1.0, 2.0, -3.0, -4.0, -5.0, -1.0]))
    def test_find_closest_elements_7(self):
        self.assertEqual((-1.0, 1.0), find_closest_elements([-1.0, 1.0, 2.0, -3.0, -4.0, -5.0]))
    def test_find_closest_elements_8(self):
        self.assertEqual((-1.0, 1.0), find_closest_elements([-1.0, 1.0, 2.0, 3.0, -4.0, -5.0]))
    def test_find_closest_elements_9(self):
        self.assertEqual((-1.0, 1.0), find_closest_elements([-1.0, 1.0, 2.0, 3.0, 4.0, -5.0]))
    def test_find_closest_elements_10(self):
        self.assertEqual((-1.0, 1.0), find_closest_elements([-1.0, 1.0, 2.0, 3.0, 4.0, 5.0]))
    def test_find_closest_elements_11(self):
        self.assertEqual((-1.0, 1.0), find_closest_elements([1.0, -2.0, -3.0, -4.0, -5.0, -6.0, -7.0, -8.0, -9.0, -10.0,
                                                             -11.0, 1.0]))
    def test_find_closest_elements_12(self):
        self.assertEqual((-1.0, 1.0), find_closest_elements([1.0, -2.0, -3.0, -4.0, -5.0, -6.0, -7.0, -8.0, -9.0, -10.0,
                                                             -11.0, 1.0]))
    def test_find_closest_elements_13(self):
        self.assertEqual((-1.0, 1.0), find_closest_elements([1.0, -2.0, -3.0, -4.0, -5.0, -6.0, -7.0, -8.0, -9.0, -10.0,
                                                             -11.0, 1.0]))
    def test_find_closest_elements_14(self):
        self.assertEqual((-1.0, 1.0), find_closest_elements([1.0, -2.0, -3.0, -4.0, -5.0, -6.0, -7.0, -8.0, -9.0, -10.0,
                                                             -11.0, 1.0]))
"
"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","
class TestRescaleToUnit(unittest.TestCase):
    def test_rescale_to_unit_1(self):
        self.assertEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])
    def test_rescale_to_unit_2(self):
        self.assertEqual(rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])
    def test_rescale_to_unit_3(self):
        self.assertEqual(rescale_to_unit([-1.0, 0.0, 1.0, 2.0, 3.0]), [0.0, 0.25, 0.5, 0.75, 1.0])
    def test_rescale_to_unit_4(self):
        self.assertEqual(rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])
    def test_rescale_to_unit_5(self):
        self.assertEqual(rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])
    def test_rescale_to_unit_6(self):
        self.assertEqual(rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])
    def test_rescale_to_unit_7(self):
        self.assertEqual(rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])
    def test_rescale_to_unit_8(self):
        self.assertEqual(rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])
    def test_rescale_to_unit_9(self):
        self.assertEqual(rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])
    def test_rescale_to_unit_10(self):
        self.assertEqual(rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])
    def test_rescale_to_unit_11(self):
        self.assertEqual(rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])
    def test_rescale_to_unit_12(self):
        self.assertEqual(rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])
    def test_rescale_to_unit_13(self):
        self.assertEqual(rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])
    def test_rescale_to_unit_14(self):
        self.assertEqual(rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])
"
"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","    return [x for x in values if isinstance(x, int)]
","
class TestFilterIntegers:
    def test_filter_integers(self):
        self.assertEqual(filter_integers(['a', 3.14, 5]), [5])
        self.assertEqual(filter_integers([1, 2, 3, 'abc', {}, []]), [1, 2, 3])

    def test_filter_integers_empty_list(self):
        self.assertEqual(filter_integers([]), [])

    def test_filter_integers_single_element(self):
        self.assertEqual(filter_integers([1]), [1])

    def test_filter_integers_multiple_elements(self):
        self.assertEqual(filter_integers([1, 2, 3]), [1, 2, 3])

    def test_filter_integers_mixed_types(self):
        self.assertEqual(filter_integers([1, 'a', 2, {}, 3]), [1, 2, 3])

    def test_filter_integers_empty_list(self):
        self.assertEqual(filter_integers([]), [])

    def test_filter_integers_single_element(self):
        self.assertEqual(filter_integers([1]), [1])

    def test_filter_integers_multiple_elements(self):
        self.assertEqual(filter_integers([1, 2, 3]), [1, 2, 3])

    def test_filter_integers_mixed_types(self):
        self.assertEqual(filter_integers([1, 'a', 2, {}, 3]), [1, 2, 3])

    def test_filter_integers_empty_list(self):
        self.assertEqual(filter_integers([]), [])

    def test_filter_integers_single_element(self):
        self.assertEqual(filter_integers([1]), [1])

    def test_filter_integers_multiple_elements(self):
        self.assertEqual(filter_integers([1, 2, 3]), [1, 2, 3])

    def test_filter_integers_mixed_types(self):
        self.assertEqual(filter_integers([1, 'a', 2, {}, 3]), [1, 2, 3])

    def test_filter_integers_empty_list(self):
        self.assertEqual(filter_integers([]), [])

    def test_filter_integers_single_element(self):
        self.assertEqual(filter_integers([1]), [1])

    def test_filter_integers_multiple_elements(self):
        self.assertEqual(filter_integers([1, 2, 3]), [1, 2, 3])

    def test_filter_integers_mixed_types(self):
        self.assertEqual(filter_integers([1, 'a', 2, {}, 3]), [1, 2, 3])

    def test_filter_integers_empty_list(self):
        self.assertEqual(filter_integers([]), [])

    def test_filter_integers_single_element(self):
        self.assertEqual(filter_integers([1]), [1])

    def test_filter_integers_multiple_elements(self):
        self.assertEqual(filter_integers([1, 2, 3]), [1, 2, 3])

    def test_filter_integers_mixed_types(self):
        self.assertEqual(filter_integers([1, 'a', 2, {}, 3]), [1, 2, 3])

    def test_filter_integers_empty_list(self):
        self.assertEqual(filter_integers([]), [])

    def test_filter_integers_single_element(self):
        self.assertEqual(filter_integers([1]), [1])

    def test_filter_integers_multiple_elements(self):
        self.assertEqual(filter_integers([1, 2, 3]), [1, 2, 3])

"
"

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","    return len(string)
","
class TestStrLen:
    def test_strlen_empty_string(self):
        self.assertEqual(strlen(''), 0)

    def test_strlen_single_character(self):
        self.assertEqual(strlen('a'), 1)

    def test_strlen_multiple_characters(self):
        self.assertEqual(strlen('abc'), 3)

    def test_strlen_unicode_string(self):
        self.assertEqual(strlen('你好'), 2)

    def test_strlen_empty_list(self):
        self.assertEqual(strlen([]), 0)

    def test_strlen_single_element_list(self):
        self.assertEqual(strlen(['a']), 1)

    def test_strlen_multiple_elements_list(self):
        self.assertEqual(strlen(['a', 'b', 'c']), 3)

    def test_strlen_empty_tuple(self):
        self.assertEqual(strlen(()), 0)

    def test_strlen_single_element_tuple(self):
        self.assertEqual(strlen(('a',)), 1)

    def test_strlen_multiple_elements_tuple(self):
        self.assertEqual(strlen(('a', 'b', 'c')), 3)

    def test_strlen_empty_set(self):
        self.assertEqual(strlen({}), 0)

    def test_strlen_single_element_set(self):
        self.assertEqual(strlen({'a'}), 1)

    def test_strlen_multiple_elements_set(self):
        self.assertEqual(strlen({'a', 'b', 'c'}), 3)

    def test_strlen_empty_dict(self):
        self.assertEqual(strlen({}), 0)

    def test_strlen_single_element_dict(self):
        self.assertEqual(strlen({'a': 'b'}), 1)

    def test_strlen_multiple_elements_dict(self):
        self.assertEqual(strlen({'a': 'b', 'c': 'd'}), 2)

    def test_strlen_empty_frozenset(self):
        self.assertEqual(strlen(frozenset()), 0)

    def test_strlen_single_element_frozenset(self):
        self.assertEqual(strlen(frozenset({'a'})), 1)

    def test_strlen_multiple_elements_frozenset(self):
        self.assertEqual(strlen(frozenset({'a', 'b', 'c'})), 3)

    def test_strlen_empty_bytearray(self):
        self.assertEqual(strlen(bytearray()), 0)

    def test_strlen_single_element_bytearray(self):
        self.assertEqual(strlen(bytearray({b'a'})), 1)

    def test_strlen_multiple_elements_bytearray(self):
        self.assertEqual(strlen(bytearray({b'a', b'b', b'c'})), 3)

    def test_strlen_empty_memoryview(self):
        self.assertEqual(strlen(memoryview(bytearray())), 0)

    def test_strlen_single_element_memoryview(self):
        self.assertEqual(strlen(memoryview(bytearray({b'a'}))), 1)

    def test_strlen_multiple_elements_memoryview(self):
        self.assertEqual(strlen(memoryview(bytearray({b'a', b'b', b'c'}))), 3)

    def test_strlen_empty_range(self):
        self.assertEqual(strlen(range(0)), 0)

    def test_strlen_single_element_range(self):
        self.assertEqual(strlen(range(1)), 1)

    def test_strlen_multiple_elements_range(self):
        self.assertEqual(strlen(range(3)), 3)

"
"

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","
import unittest


class TestLargestDivisor(unittest.TestCase):
    def test_largest_divisor_1(self):
        self.assertEqual(largest_divisor(15), 5)
    def test_largest_divisor_2(self):
        self.assertEqual(largest_divisor(20), 4)
    def test_largest_divisor_3(self):
        self.assertEqual(largest_divisor(36), 6)
    def test_largest_divisor_4(self):
        self.assertEqual(largest_divisor(72), 12)
    def test_largest_divisor_5(self):
        self.assertEqual(largest_divisor(80), 8)
    def test_largest_divisor_6(self):
        self.assertEqual(largest_divisor(90), 3)
    def test_largest_divisor_7(self):
        self.assertEqual(largest_divisor(100), 10)
    def test_largest_divisor_8(self):
        self.assertEqual(largest_divisor(120), 6)
    def test_largest_divisor_9(self):
        self.assertEqual(largest_divisor(150), 5)
    def test_largest_divisor_10(self):
        self.assertEqual(largest_divisor(180), 3)

"
"from typing import List


def factorize(n: int) -> List[int]:
    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","
import unittest
from factorize import factorize


class TestFactorize(unittest.TestCase):
    def test_factorize_1(self):
        self.assertEqual(factorize(8), [2, 2, 2])
    def test_factorize_2(self):
        self.assertEqual(factorize(25), [5, 5])
    def test_factorize_3(self):
        self.assertEqual(factorize(70), [2, 5, 7])
    def test_factorize_4(self):
        self.assertEqual(factorize(16), [2, 2, 2, 2])
    def test_factorize_5(self):
        self.assertEqual(factorize(32), [2, 2, 2, 2, 2])
    def test_factorize_6(self):
        self.assertEqual(factorize(48), [2, 2, 2, 2, 3])
    def test_factorize_7(self):
        self.assertEqual(factorize(64), [2, 2, 2, 2, 2, 2])
    def test_factorize_8(self):
        self.assertEqual(factorize(100), [2, 2, 5, 5])
    def test_factorize_9(self):
        self.assertEqual(factorize(128), [2, 2, 2, 2, 2, 2, 2])
    def test_factorize_10(self):
        self.assertEqual(factorize(144), [2, 2, 2, 3, 3])
    def test_factorize_11(self):
        self.assertEqual(factorize(192), [2, 2, 2, 2, 2, 3])
    def test_factorize_12(self):
        self.assertEqual(factorize(256), [2, 2, 2, 2, 2, 2, 2])
    def test_factorize_13(self):
        self.assertEqual(factorize(384), [2, 2, 2, 2, 2, 2, 3])
    def test_factorize_14(self):
        self.assertEqual(factorize(512), [2, 2, 2, 2, 2, 2, 2, 2])
    def test_factorize_15(self):
        self.assertEqual(factorize(768), [2, 2, 2, 2, 2, 3, 3])
    def test_factorize_16(self):
        self.assertEqual(factorize(1024), [2, 2, 2, 2, 2, 2, 2, 2])
    def test_factorize_17(self):
        self.assertEqual(factorize(1536), [2, 2, 2, 2, 2, 2, 2, 3])

"
"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","
class TestRemoveDuplicates:
    def test_remove_duplicates_1(self):
        self.assertEqual([1, 3, 4], remove_duplicates([1, 2, 3, 2, 4]))
    def test_remove_duplicates_2(self):
        self.assertEqual([1, 2, 3, 4], remove_duplicates([1, 2, 3, 4]))
    def test_remove_duplicates_3(self):
        self.assertEqual([1, 2, 3, 4], remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
    def test_remove_duplicates_4(self):
        self.assertEqual([1, 2, 3, 4], remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))
    def test_remove_duplicates_5(self):
        self.assertEqual([1, 2, 3, 4], remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))
    def test_remove_duplicates_6(self):
        self.assertEqual([1, 2, 3, 4], remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))
    def test_remove_duplicates_7(self):
        self.assertEqual([1, 2, 3, 4], remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))
    def test_remove_duplicates_8(self):
        self.assertEqual([1, 2, 3, 4], remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))
    def test_remove_duplicates_9(self):
        self.assertEqual([1, 2, 3, 4], remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))
    def test_remove_duplicates_10(self):
        self.assertEqual([1, 2, 3, 4], remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))
    def test_remove_duplicates_11(self):
        self.assertEqual([1, 2, 3, 4], remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]))
    def test_remove_duplicates_12(self):
        self.assertEqual([1, 2, 3, 4], remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]))
"
"

def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
","    return string.swapcase()
","
import unittest


class TestFlipCase(unittest.TestCase):
    def test_flip_case_1(self):
        self.assertEqual(flip_case('Hello'), 'hELLO')
    def test_flip_case_2(self):
        self.assertEqual(flip_case('hello'), 'HELLO')
    def test_flip_case_3(self):
        self.assertEqual(flip_case('HellO'), 'hElLo')
    def test_flip_case_4(self):
        self.assertEqual(flip_case('HeLlO'), 'hElLo')
    def test_flip_case_5(self):
        self.assertEqual(flip_case('Hello World!'), 'hELLO wORLD!')
    def test_flip_case_6(self):
        self.assertEqual(flip_case('hello world!'), 'HELLO WORLD!')
    def test_flip_case_7(self):
        self.assertEqual(flip_case('HellO WoRlD!'), 'hElLo wOrLd!')
    def test_flip_case_8(self):
        self.assertEqual(flip_case('HeLlO WoRlD!'), 'hElLo wOrLd!')
    def test_flip_case_9(self):
        self.assertEqual(flip_case('1234567890'), '1234567890')
    def test_flip_case_10(self):
        self.assertEqual(flip_case(''), '')
    def test_flip_case_11(self):
        self.assertEqual(flip_case(' '), ' ')

"
"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","    return ''.join(strings)
","
class TestConcatenate:
    def test_empty_list(self):
        self.assertEqual('', concatenate([]))

    def test_single_element(self):
        self.assertEqual('a', concatenate(['a']))

    def test_multiple_elements(self):
        self.assertEqual('abc', concatenate(['a', 'b', 'c']))

    def test_empty_string(self):
        self.assertEqual('', concatenate(['', '', '']))

    def test_single_element_with_empty_string(self):
        self.assertEqual('a', concatenate(['a', '', '']))

    def test_multiple_elements_with_empty_strings(self):
        self.assertEqual('abc', concatenate(['a', '', 'b', '', 'c', '', '']))

    def test_single_element_with_spaces(self):
        self.assertEqual(' a ', concatenate([' a ']))

    def test_multiple_elements_with_spaces(self):
        self.assertEqual(' a b c ', concatenate([' a ', '', ' b ', '', ' c ', '', '']))

    def test_single_element_with_leading_and_trailing_spaces(self):
        self.assertEqual(' a ', concatenate(['  a  ']))

    def test_multiple_elements_with_leading_and_trailing_spaces(self):
        self.assertEqual(' a b c ', concatenate(['  a  ', '', ' b ', '', ' c ', '', '']))

    def test_single_element_with_leading_and_trailing_spaces_and_empty_strings(self):
        self.assertEqual(' a ', concatenate(['  a  ', '', '', '']))

    def test_multiple_elements_with_leading_and_trailing_spaces_and_empty_strings(self):
        self.assertEqual(' a b c ', concatenate(['  a  ', '', '', ' b ', '', ' c ', '', '']))

    def test_single_element_with_leading_and_trailing_spaces_and_empty_strings_and_spaces(self):
        self.assertEqual(' a ', concatenate(['  a  ', '', '', '', '']))

    def test_multiple_elements_with_leading_and_trailing_spaces_and_empty_strings_and_spaces(self):
        self.assertEqual(' a b c ', concatenate(['  a  ', '', '', '', ' b ', '', ' c ', '', '']))

    def test_single_element_with_leading_and_trailing_spaces_and_empty_strings_and_spaces_and_empty_string(self):
        self.assertEqual(' a ', concatenate(['  a  ', '', '', '', '', '']))

    def test_multiple_elements_with_leading_and_trailing_spaces_and_empty_strings_and_spaces_and_empty_string(self):
        self.assertEqual(' a b c ', concatenate(['  a  ', '', '', '', '', ' b ', '', ' c ', '', '']))

    def test_single_element_with_leading_and_trailing_spaces_and_empty_strings_and_spaces_and_empty_string_and_spaces(self):
        self.assertEqual(' a ', concatenate(['  a  ', '', '', '', '', '', '']))

    def test_multiple_elements_with_leading_and_trailing_spaces_and_empty_strings_and_spaces_and_empty_string_and_spaces(self):
        self.assertEqual(' a b c ', concatenate(['  a  ', '', '', '', '', '', ' b ', '', ' c ', '', '']))

    def test_single_element_with_leading_and_trailing_spaces_and_empty_strings_and_spaces_and_empty_string_and_spaces_and_empty_string(self):
        self.assertEqual(' a ', concatenate(['  a  ', '', '', '', '', '', '', '']))

    def test_multiple_elements_with_leading_and_trailing_spaces_and_empty_strings_and_spaces_and_empty_string_and_spaces_and_empty_string(self):
        self.assertEqual(' a b c ', concatenate(['  a  ', '', '', '', '', '', '', ' b ', '', ' c ', '', '']))
"
"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","    return [x for x in strings if x.startswith(prefix)]
","
class TestFilterByPrefix:
    def test_empty_list(self):
        self.assertEqual([], filter_by_prefix([], 'a'))

    def test_no_matching_strings(self):
        self.assertEqual([], filter_by_prefix(['abc', 'bcd', 'cde'], 'f'))

    def test_one_matching_string(self):
        self.assertEqual(['array'], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))

    def test_multiple_matching_strings(self):
        self.assertEqual(['abc', 'array'], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))

    def test_no_matching_strings_with_empty_string(self):
        self.assertEqual([], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], ''))

    def test_one_matching_string_with_empty_string(self):
        self.assertEqual(['array'], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], ''))

    def test_multiple_matching_strings_with_empty_string(self):
        self.assertEqual(['abc', 'array'], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], ''))

    def test_no_matching_strings_with_non_alphabetical_characters(self):
        self.assertEqual([], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], '1'))

    def test_one_matching_string_with_non_alphabetical_characters(self):
        self.assertEqual(['array'], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a1'))

    def test_multiple_matching_strings_with_non_alphabetical_characters(self):
        self.assertEqual(['abc', 'array'], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a1'))

    def test_no_matching_strings_with_special_characters(self):
        self.assertEqual([], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], '!'))

    def test_one_matching_string_with_special_characters(self):
        self.assertEqual(['array'], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a!'))

    def test_multiple_matching_strings_with_special_characters(self):
        self.assertEqual(['abc', 'array'], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a!'))

    def test_no_matching_strings_with_numbers(self):
        self.assertEqual([], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], '1234567890'))

    def test_one_matching_string_with_numbers(self):
        self.assertEqual(['array'], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a1234567890'))

    def test_multiple_matching_strings_with_numbers(self):
        self.assertEqual(['abc', 'array'], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a1234567890'))

    def test_no_matching_strings_with_special_characters_and_numbers(self):
        self.assertEqual([], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], '!1234567890'))

    def test_one_matching_string_with_special_characters_and_numbers(self):
        self.assertEqual(['array'], filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a!1234567890'))
"
"

def get_positive(l: list):
    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","    return [e for e in l if e > 0]
","
import unittest


class Test(unittest.TestCase):
    def test_get_positive(self):
        self.assertEqual([2, 5, 6], get_positive([-1, 2, -4, 5, 6]))
        self.assertEqual([5, 3, 2, 3, 9, 123, 1], get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
        self.assertEqual([], get_positive([]))
        self.assertEqual([-1, -4, -5], get_positive([-1, -4, -5]))
        self.assertEqual([], get_positive([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
        self.assertEqual([], get_positive([-1, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]))
        self.assertEqual([], get_positive([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]))
        self.assertEqual([-1, -4, -5, 0, 0, 0, 0, 0, 0, 0], get_positive([-1, -4, -5, 0, 0, 0, 0, 0, 0, 0]))
        self.assertEqual([-1, -4, -5, 0, 0, 0, 0, 0, 0], get_positive([-1, -4, -5, 0, 0, 0, 0, 0, 0]))
        self.assertEqual([-1, -4, -5, 0, 0, 0, 0, 0], get_positive([-1, -4, -5, 0, 0, 0, 0, 0]))
        self.assertEqual([-1, -4, -5, 0, 0, 0, 0], get_positive([-1, -4, -5, 0, 0, 0, 0]))
        self.assertEqual([-1, -4, -5, 0, 0, 0], get_positive([-1, -4, -5, 0, 0, 0]))
        self.assertEqual([-1, -4, -5, 0, 0], get_positive([-1, -4, -5, 0, 0]))
        self.assertEqual([-1, -4, -5, 0], get_positive([-1, -4, -5, 0]))
        self.assertEqual([-1, -4, -5], get_positive([-1, -4, -5]))
        self.assertEqual([-1, -4], get_positive([-1, -4]))
        self.assertEqual([-1], get_positive([-1]))
        self.assertEqual([], get_positive([]))
"
"

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","
import unittest


class TestIsPrime(unittest.TestCase):
    def test_is_prime(self):
        self.assertTrue(is_prime(6))
        self.assertFalse(is_prime(101))
        self.assertTrue(is_prime(11))
        self.assertTrue(is_prime(13441))
        self.assertTrue(is_prime(61))
        self.assertFalse(is_prime(4))
        self.assertFalse(is_prime(1))
"
"import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","
class TestFindZero(unittest.TestCase):
    def test_find_zero(self):
        self.assertEqual(round(find_zero([1, 2]), 2), -0.5)
        self.assertEqual(round(find_zero([-6, 11, -6, 1]), 2), 1.0)
        self.assertEqual(round(find_zero([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2), -1.0)
        self.assertEqual(round(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2), -1.0)
        self.assertEqual(round(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2), -1.0)
        self.assertEqual(round(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2), -1.0)
        self.assertEqual(round(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2), -1.0)
        self.assertEqual(round(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2), -1.0)
        self.assertEqual(round(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2), -1.0)
        self.assertEqual(round(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2), -1.0)
        self.assertEqual(round(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2), -1.0)
        self.assertEqual(round(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2), -1.0)
        self.assertEqual(round(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2), -1.0)
        self.assertEqual(round(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2), -1.0)
        self.assertEqual(round(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2), -1.0)"
"

def sort_third(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","
class TestSortThird:
    def test_sort_third(self):
        self.assertEqual(sort_third([1, 2, 3]), [1, 2, 3])
        self.assertEqual(sort_third([5, 6, 3, 4, 8, 9, 2]), [2, 6, 3, 4, 8, 9, 5])
        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]), [1, 2, 3, 4, 5, 6, 7, 8, 9])
        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])
        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])
        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])
        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])"
"

def unique(l: list):
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","    return sorted(list(set(l)))
","
class TestUnique:
    def test_unique(self):
        self.assertEqual(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]), [0, 2, 3, 5, 9, 123])
        self.assertEqual(unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        self.assertEqual(unique([1, 1, 1, 1, 1, 1, 1, 1, 1]), [1])
        self.assertEqual(unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 1, 1, 1, 1, 1, 1, 1, 1]), [0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 5, 9, 123])
        self.assertEqual(unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
        self.assertEqual(unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), [1])
        self.assertEqual(unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 1, 1, 1, 1, 1, 1, 1, 1]), [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 5, 9, 123])
        self.assertEqual(unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
        self.assertEqual(unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), [1])
        self.assertEqual(unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 1, 1, 1, 1, 1, 1, 1, 1]), [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 5, 9, 123])
        self.assertEqual(unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
        self.assertEqual(unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), [1])"
"

def max_element(l: list):
    """"""Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","
import unittest


class TestMaxElement(unittest.TestCase):
    def test_max_element(self):
        self.assertEqual(max_element([1, 2, 3]), 3)
        self.assertEqual(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), 123)
        self.assertEqual(max_element([-1, -2, -3]), -1)
        self.assertEqual(max_element([1, 2, 3, 4, 5]), 5)
        self.assertEqual(max_element([0, 1, 2, 3, 4, 5]), 5)
        self.assertEqual(max_element([-1, -2, -3, -4, -5]), -1)
        self.assertEqual(max_element([-1, -2, -3, -4, -5, -6]), -1)
        self.assertEqual(max_element([0, 1, 2, 3, 4, 5, 6]), 6)
        self.assertEqual(max_element([-1, -2, -3, -4, -5, -6, -7]), -1)
        self.assertEqual(max_element([0, 1, 2, 3, 4, 5, 6, 7]), 7)
        self.assertEqual(max_element([-1, -2, -3, -4, -5, -6, -7, -8]), -1)
        self.assertEqual(max_element([0, 1, 2, 3, 4, 5, 6, 7, 8]), 8)
        self.assertEqual(max_element([-1, -2, -3, -4, -5, -6, -7, -8, -9]), -1)
        self.assertEqual(max_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 9)
        self.assertEqual(max_element([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]), -1)
        self.assertEqual(max_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 10)
        self.assertEqual(max_element([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]), -1)
        self.assertEqual(max_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 11)
        self.assertEqual(max_element([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]), -1)
        self.assertEqual(max_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 12)
        self.assertEqual(max_element([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]), -1)
        self.assertEqual(max_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 13)
        self.assertEqual(max_element([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]), -1)"
"

def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","
import unittest


class TestFizzBuzz(unittest.TestCase):
    def test_fizz_buzz(self):
        self.assertEqual(fizz_buzz(50), 0)
        self.assertEqual(fizz_buzz(78), 2)
        self.assertEqual(fizz_buzz(79), 3)
        self.assertEqual(fizz_buzz(100), 4)
        self.assertEqual(fizz_buzz(150), 6)
        self.assertEqual(fizz_buzz(200), 8)
        self.assertEqual(fizz_buzz(300), 10)
        self.assertEqual(fizz_buzz(400), 12)
        self.assertEqual(fizz_buzz(500), 16)
        self.assertEqual(fizz_buzz(600), 18)
        self.assertEqual(fizz_buzz(700), 20)
        self.assertEqual(fizz_buzz(800), 24)
        self.assertEqual(fizz_buzz(900), 26)
        self.assertEqual(fizz_buzz(1000), 30)
        self.assertEqual(fizz_buzz(1500), 48)
        self.assertEqual(fizz_buzz(2000), 60)
        self.assertEqual(fizz_buzz(2500), 72)
        self.assertEqual(fizz_buzz(3000), 84)
        self.assertEqual(fizz_buzz(3500), 96)
        self.assertEqual(fizz_buzz(4000), 108)
        self.assertEqual(fizz_buzz(4500), 120)
        self.assertEqual(fizz_buzz(5000), 132)
        self.assertEqual(fizz_buzz(6000), 144)
        self.assertEqual(fizz_buzz(7000), 156)
        self.assertEqual(fizz_buzz(8000), 168)
        self.assertEqual(fizz_buzz(9000), 180)
        self.assertEqual(fizz_buzz(10000), 192)
        self.assertEqual(fizz_buzz(15000), 360)
        self.assertEqual(fizz_buzz(20000), 480)
        self.assertEqual(fizz_buzz(25000), 600)
        self.assertEqual(fizz_buzz(30000), 720)
        self.assertEqual(fizz_buzz(35000), 840)
        self.assertEqual(fizz_buzz(40000), 960)
        self.assertEqual(fizz_buzz(45000), 1080)
        self.assertEqual(fizz_buzz(50000), 1200)
        self.assertEqual(fizz_buzz(60000), 1320)
        self.assertEqual(fizz_buzz(70000), 1440)
        self.assertEqual(fizz_buzz(80000), 1560)
        self.assertEqual(fizz_buzz(90000), 1680)
        self.assertEqual(fizz_buzz(100000), 1800)
        self.assertEqual(fizz_buzz(150000), 3600)
        self.assertEqual(fizz_buzz(200000), 4800)
        self.assertEqual(fizz_buzz(250000), 6000)"
"

def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","
import unittest


class TestSortEven(unittest.TestCase):
    def test_sort_even(self):
        self.assertEqual(sort_even([1, 2, 3]), [1, 2, 3])
        self.assertEqual(sort_even([5, 6, 3, 4]), [3, 6, 5, 4])
        self.assertEqual(sort_even([1, 2, 3, 4, 5, 6]), [1, 2, 3, 4, 5, 6])
        self.assertEqual(sort_even([1, 2, 3, 4, 5, 6, 7]), [1, 2, 3, 4, 5, 6, 7])
        self.assertEqual(sort_even([1, 2, 3, 4, 5, 6, 7, 8]), [1, 2, 3, 4, 5, 6, 7, 8])
        self.assertEqual(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9]), [1, 2, 3, 4, 5, 6, 7, 8, 9])
        self.assertEqual(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        self.assertEqual(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
        self.assertEqual(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
        self.assertEqual(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])
        self.assertEqual(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])
        self.assertEqual(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
        self.assertEqual(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])
"
"

def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","    return encode_cyclic(encode_cyclic(s))
","
import unittest


class TestCyclicEncoding(unittest.TestCase):
    def test_encode_cyclic(self):
        self.assertEqual(""abc"", encode_cyclic(""abc""))
        self.assertEqual(""aabcbc"", encode_cyclic(""aaabbb""))
        self.assertEqual(""abcabcabc"", encode_cyclic(""aaabbbccc""))
        self.assertEqual(""abcabcabcabcabc"", encode_cyclic(""aaabbbcccaaabb""))
        self.assertEqual(""abcabcabcabcabcabcabcabcabc"", encode_cyclic(""aaabbbcccaaabbaa""))"
"

def prime_fib(n: int):
    """"""
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","
import unittest
from prime_fib import prime_fib


class TestPrimeFib(unittest.TestCase):
    def test_prime_fib(self):
        self.assertEqual(prime_fib(1), 2)
        self.assertEqual(prime_fib(2), 3)
        self.assertEqual(prime_fib(3), 5)
        self.assertEqual(prime_fib(4), 13)
        self.assertEqual(prime_fib(5), 89)
        self.assertEqual(prime_fib(6), 233)
        self.assertEqual(prime_fib(7), 2803)
        self.assertEqual(prime_fib(8), 4141)
        self.assertEqual(prime_fib(9), 5731)
        self.assertEqual(prime_fib(10), 6137)"
"

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","
import unittest


class TestTriplesSumToZero(unittest.TestCase):
    def test_triples_sum_to_zero(self):
        self.assertEqual(triples_sum_to_zero([1, 3, 5, 0]), False)
        self.assertEqual(triples_sum_to_zero([1, 3, -2, 1]), True)
        self.assertEqual(triples_sum_to_zero([1, 2, 3, 7]), False)
        self.assertEqual(triples_sum_to_zero([2, 4, -5, 3, 9, 7]), True)
        self.assertEqual(triples_sum_to_zero([1]), False)"
"

def car_race_collision(n: int):
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""
","    return n**2
","
class TestCarRaceCollision(unittest.TestCase):
    def test_car_race_collision(self):
        self.assertEqual(car_race_collision(2), 4)
        self.assertEqual(car_race_collision(3), 9)
        self.assertEqual(car_race_collision(4), 16)
        self.assertEqual(car_race_collision(5), 25)
        self.assertEqual(car_race_collision(6), 36)
        self.assertEqual(car_race_collision(7), 49)
        self.assertEqual(car_race_collision(8), 64)
        self.assertEqual(car_race_collision(9), 81)
        self.assertEqual(car_race_collision(10), 100)
        self.assertEqual(car_race_collision(11), 121)
"
"

def incr_list(l: list):
    """"""Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","    return [(e + 1) for e in l]
","import unittest


class TestIncrList(unittest.TestCase):
    def test_incr_list(self):
        self.assertEqual(incr_list([1, 2, 3]), [2, 3, 4])
        self.assertEqual(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]), [6, 4, 6, 3, 4, 4, 10, 1, 124])
        self.assertEqual(incr_list([-5, -3, -5, -2, -3, -3, -9, -0, -123]), [-4, -2, -4, -1, -2, -2, -8, 0, -124])
        self.assertEqual(incr_list([-5, -3, -5, -2, -3, -3, -9, -0, -123]), [-4, -2, -4, -1, -2, -2, -8, 0, -124])
        self.assertEqual(incr_list([-5, -3, -5, -2, -3, -3, -9, -0, -123]), [-4, -2, -4, -1, -2, -2, -8, 0, -124])
        self.assertEqual(incr_list([-5, -3, -5, -2, -3, -3, -9, -0, -123]), [-4, -2, -4, -1, -2, -2, -8, 0, -124])
        self.assertEqual(incr_list([-5, -3, -5, -2, -3, -3, -9, -0, -123]), [-4, -2, -4, -1, -2, -2, -8, 0, -124])
        self.assertEqual(incr_list([-5, -3, -5, -2, -3, -3, -9, -0, -123]), [-4, -2, -4, -1, -2, -2, -8, 0, -124])
        self.assertEqual(incr_list([-5, -3, -5, -2, -3, -3, -9, -0, -123]), [-4, -2, -4, -1, -2, -2, -8, 0, -124])
        self.assertEqual(incr_list([-5, -3, -5, -2, -3, -3, -9, -0, -123]), [-4, -2, -4, -1, -2, -2, -8, 0, -124])
        self.assertEqual(incr_list([-5, -3, -5, -2, -3, -3, -9, -0, -123]), [-4, -2, -4, -1, -2, -2, -8, 0, -124])
        self.assertEqual(incr_list([-5, -3, -5, -2, -3, -3, -9, -0, -123]), [-4, -2, -4, -1, -2, -2, -8, 0, -124])
        self.assertEqual(incr_list([-5, -3, -5, -2, -3, -3, -9, -0, -123]), [-4, -2, -4, -1, -2, -2, -8, 0, -124])
        self.assertEqual(incr_list([-5, -3, -5, -2, -3, -3, -9, -0, -123]), [-4, -2, -4, -1, -2, -2, -8, 0, -124])"
"

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","import unittest


class TestPairsSumToZero(unittest.TestCase):
    def test_pairs_sum_to_zero(self):
        self.assertEqual(pairs_sum_to_zero([1, 3, 5, 0]), False)
        self.assertEqual(pairs_sum_to_zero([1, 3, -2, 1]), False)
        self.assertEqual(pairs_sum_to_zero([1, 2, 3, 7]), False)
        self.assertEqual(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]), True)
        self.assertEqual(pairs_sum_to_zero([1]), False)
"
"

def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","import unittest


class TestChangeBase(unittest.TestCase):
    def test_change_base(self):
        self.assertEqual(change_base(8, 3), ""22"")
        self.assertEqual(change_base(8, 2), ""1000"")
        self.assertEqual(change_base(7, 2), ""111"")

    def test_change_base_negative(self):
        with self.assertRaises(ValueError):
            change_base(-8, 3)
        with self.assertRaises(ValueError):
            change_base(8, -3)
        with self.assertRaises(ValueError):
            change_base(-8, -3)

    def test_change_base_zero(self):
        self.assertEqual(change_base(0, 2), ""0"")
        self.assertEqual(change_base(0, 10), ""0"")
        self.assertEqual(change_base(0, -3), ""0"")

    def test_change_base_one(self):
        self.assertEqual(change_base(1, 2), ""1"")
        self.assertEqual(change_base(1, 10), ""1"")
        self.assertEqual(change_base(1, -3), ""1"")

    def test_change_base_two(self):
        self.assertEqual(change_base(2, 2), ""10"")
        self.assertEqual(change_base(2, 10), ""2"")
        self.assertEqual(change_base(2, -3), ""10"")

    def test_change_base_three(self):
        self.assertEqual(change_base(3, 2), ""11"")
        self.assertEqual(change_base(3, 10), ""3"")
        self.assertEqual(change_base(3, -3), ""11"")

    def test_change_base_four(self):
        self.assertEqual(change_base(4, 2), ""100"")
        self.assertEqual(change_base(4, 10), ""4"")
        self.assertEqual(change_base(4, -3), ""100"")

    def test_change_base_five(self):
        self.assertEqual(change_base(5, 2), ""101"")
        self.assertEqual(change_base(5, 10), ""5"")
        self.assertEqual(change_base(5, -3), ""101"")

    def test_change_base_six(self):
        self.assertEqual(change_base(6, 2), ""110"")
        self.assertEqual(change_base(6, 10), ""6"")
        self.assertEqual(change_base(6, -3), ""110"")

    def test_change_base_seven(self):
        self.assertEqual(change_base(7, 2), ""111"")
        self.assertEqual(change_base(7, 10), ""7"")
        self.assertEqual(change_base(7, -3), ""111"")

    def test_change_base_eight(self):
        self.assertEqual(change_base(8, 2), ""1000"")
        self.assertEqual(change_base(8, 10), ""8"")
        self.assertEqual(change_base(8, -3), ""1000"")

    def test_change_base_nine(self):
        self.assertEqual(change_base(9, 2), ""1001"")
        self.assertEqual(change_base(9, 10), ""9"")
        self.assertEqual(change_base(9, -3), ""1001"")

    def test_change_base_ten(self):
        self.assertEqual(change_base(10, 2), ""1010"")
        self.assertEqual(change_base(10, 10), ""10"")
        self.assertEqual(change_base(10, -3), ""1010"")
"
"

def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
","    return a * h / 2.0
","import unittest

class TestTriangleArea(unittest.TestCase):
    def setUp(self):
        self.a = 5
        self.h = 3

    def test_triangle_area_with_positive_values(self):
        """"""Test triangle area with positive values.""""""
        self.assertEqual(triangle_area(self.a, self.h), 7.5)

    def test_triangle_area_with_zero_value(self):
        """"""Test triangle area with zero value.""""""
        self.assertRaises(ValueError, triangle_area, 0, 3)

    def test_triangle_area_with_negative_values(self):
        """"""Test triangle area with negative values.""""""
        self.assertRaises(ValueError, triangle_area, -5, 3)

    def test_triangle_area_with_float_value(self):
        """"""Test triangle area with float value.""""""
        self.assertEqual(triangle_area(4.2, 3), 6.1)

    def test_triangle_area_with_negative_float_value(self):
        """"""Test triangle area with negative float value.""""""
        self.assertRaises(ValueError, triangle_area, -4.2, 3)

    def test_triangle_area_with_zero_float_value(self):
        """"""Test triangle area with zero float value.""""""
        self.assertRaises(ValueError, triangle_area, 0.0, 3)

    def test_triangle_area_with_negative_zero_float_value(self):
        """"""Test triangle area with negative zero float value.""""""
        self.assertRaises(ValueError, triangle_area, -0.0, 3)

    def test_triangle_area_with_negative_zero_float_value(self):
        """"""Test triangle area with negative zero float value.""""""
        self.assertRaises(ValueError, triangle_area, 4.2, -3)

    def test_triangle_area_with_negative_values_and_float_value(self):
        """"""Test triangle area with negative values and float value.""""""
        self.assertRaises(ValueError, triangle_area, -5.0, 3)

    def test_triangle_area_with_zero_value_and_float_value(self):
        """"""Test triangle area with zero value and float value.""""""
        self.assertRaises(ValueError, triangle_area, 0.0, 3)

    def test_triangle_area_with_negative_zero_value_and_float_value(self):
        """"""Test triangle area with negative zero value and float value.""""""
        self.assertRaises(ValueError, triangle_area, -0.0, 3)

    def test_triangle_area_with_negative_zero_value_and_float_value(self):
        """"""Test triangle area with negative zero value and float value.""""""
        self.assertRaises(ValueError, triangle_area, 4.2, -3)

    def test_triangle_area_with_negative_values_and_zero_float_value(self):
        """"""Test triangle area with negative values and zero float value.""""""
        self.assertRaises(ValueError, triangle_area, -5.0, 0)

    def test_triangle_area_with_zero_value_and_zero_float_value(self):
        """"""Test triangle area with zero value and zero float value.""""""
        self.assertRaises(ValueError, triangle_area, 0.0, 0)

    def test_triangle_area_with_negative_zero_value_and_zero_float_value(self):
        """"""Test triangle area with negative zero value and zero float value.""""""
        self.assertRaises(ValueError, triangle_area, -0.0, 0)

    def test_triangle_area_with_negative_zero_value_and_negative_float_value(self):
        """"""Test triangle area with negative zero value and negative float value.""""""
        self.assertRaises(ValueError, triangle_area, -0.0, -3)
"
"

def fib4(n: int):
    """"""The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","class TestFib4:
    def test_fib4(self):
        self.assertEqual(fib4(5), 4)
        self.assertEqual(fib4(6), 8)
        self.assertEqual(fib4(7), 14)
        self.assertEqual(fib4(8), 20)
        self.assertEqual(fib4(9), 32)
        self.assertEqual(fib4(10), 50)
        self.assertEqual(fib4(11), 84)
        self.assertEqual(fib4(12), 136)
        self.assertEqual(fib4(13), 220)
        self.assertEqual(fib4(14), 352)
        self.assertEqual(fib4(15), 576)
        self.assertEqual(fib4(16), 928)
        self.assertEqual(fib4(17), 1500)
        self.assertEqual(fib4(18), 2436)
        self.assertEqual(fib4(19), 3928)
        self.assertEqual(fib4(20), 6376)
        self.assertEqual(fib4(21), 10152)
        self.assertEqual(fib4(22), 16008)
        self.assertEqual(fib4(23), 26528)
        self.assertEqual(fib4(24), 42728)
        self.assertEqual(fib4(25), 69128)
        self.assertEqual(fib4(26), 113048)
        self.assertEqual(fib4(27), 181628)
        self.assertEqual(fib4(28), 295228)
        self.assertEqual(fib4(29), 490048)
        self.assertEqual(fib4(30), 796048)
        self.assertEqual(fib4(31), 1258628)
        self.assertEqual(fib4(32), 2036528)
        self.assertEqual(fib4(33), 3295228)
        self.assertEqual(fib4(34), 5271628)
        self.assertEqual(fib4(35), 8631628)
        self.assertEqual(fib4(36), 14092228)
        self.assertEqual(fib4(37), 22952280)
        self.assertEqual(fib4(38), 37952280)
        self.assertEqual(fib4(39), 61892280)
        self.assertEqual(fib4(40), 99492280)
        self.assertEqual(fib4(41), 159792280)
        self.assertEqual(fib4(42), 263792280)
        self.assertEqual(fib4(43), 429792280)
        self.assertEqual(fib4(44), 679792280)
        self.assertEqual(fib4(45), 1099792280)
        self.assertEqual(fib4(46), 1799792280)
        self.assertEqual(fib4(47), 2899792280)
        self.assertEqual(fib4(48), 4599792280)
        self.assertEqual(fib4(49), 7399792280)
        self.assertEqual(fib4(50), 12099792280)
        self.assert"
"

def median(l: list):
    """"""Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","import unittest


class TestMedian(unittest.TestCase):
    def test_median(self):
        self.assertEqual(median([3, 1, 2, 4, 5]), 3)
        self.assertEqual(median([-10, 4, 6, 1000, 10, 20]), 15.0)
        self.assertEqual(median([1, 2, 3, 4, 5]), 3.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 0.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 0.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]), 0.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7]), 0.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]), 0.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]), 0.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4]), 0.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3]), 0.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2]), 0.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1]), 0.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0]), 0.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]), 0.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4, -3, -2]), 0.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4, -3]), 0.0)
        self.assertEqual(median([-10, -9, -8, -7, -6, -5, -4]), 0.0)"
"

def is_palindrome(text: str):
    """"""
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","import unittest


class TestIsPalindrome(unittest.TestCase):
    def test_is_palindrome(self):
        self.assertTrue(is_palindrome(''))
        self.assertTrue(is_palindrome('aba'))
        self.assertTrue(is_palindrome('aaaaa'))
        self.assertFalse(is_palindrome('zbcd'))

    def test_is_palindrome_with_spaces(self):
        self.assertTrue(is_palindrome(' a b a '))
        self.assertTrue(is_palindrome('a b a'))
        self.assertFalse(is_palindrome('a b c'))

    def test_is_palindrome_with_numbers(self):
        self.assertTrue(is_palindrome('123454321'))
        self.assertFalse(is_palindrome('123456789'))

    def test_is_palindrome_with_special_characters(self):
        self.assertTrue(is_palindrome('!@#$%^&*()'))
        self.assertFalse(is_palindrome('!@#$%^&*())'))

    def test_is_palindrome_with_uppercase(self):
        self.assertTrue(is_palindrome('A B A'))
        self.assertFalse(is_palindrome('A B C'))

    def test_is_palindrome_with_mixed_cases(self):
        self.assertTrue(is_palindrome('aBa'))
        self.assertFalse(is_palindrome('aBc'))

    def test_is_palindrome_with_unicode(self):
        self.assertTrue(is_palindrome('😀 😀'))
        self.assertFalse(is_palindrome('😀 😁'))

    def test_is_palindrome_with_non_ascii_characters(self):
        self.assertTrue(is_palindrome('你好吗'))
        self.assertFalse(is_palindrome('你好'))

    def test_is_palindrome_with_empty_string(self):
        with self.assertRaises(ValueError) as context:
            is_palindrome('')
        self.assertTrue('Empty string' in str(context.exception))

    def test_is_palindrome_with_non_string_input(self):
        with self.assertRaises(TypeError) as context:
            is_palindrome(1234567890)
        self.assertTrue('Expected string' in str(context.exception))
"
"

def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","class TestModp:
    def test_modp(self):
        self.assertEqual(modp(3, 5), 3)
        self.assertEqual(modp(1101, 101), 2)
        self.assertEqual(modp(0, 101), 1)
        self.assertEqual(modp(3, 11), 8)
        self.assertEqual(modp(100, 101), 1)

    def test_modp2(self):
        self.assertEqual(modp(4, 5), 4)
        self.assertEqual(modp(1102, 101), 3)
        self.assertEqual(modp(1, 101), 1)
        self.assertEqual(modp(3, 12), 9)
        self.assertEqual(modp(101, 101), 1)

    def test_modp3(self):
        self.assertEqual(modp(5, 5), 1)
        self.assertEqual(modp(1103, 101), 4)
        self.assertEqual(modp(2, 101), 2)
        self.assertEqual(modp(3, 13), 10)
        self.assertEqual(modp(102, 101), 2)

    def test_modp4(self):
        self.assertEqual(modp(6, 5), 6)
        self.assertEqual(modp(1104, 101), 5)
        self.assertEqual(modp(3, 101), 3)
        self.assertEqual(modp(3, 14), 11)
        self.assertEqual(modp(103, 101), 3)

    def test_modp5(self):
        self.assertEqual(modp(7, 5), 7)
        self.assertEqual(modp(1105, 101), 6)
        self.assertEqual(modp(4, 101), 4)
        self.assertEqual(modp(3, 15), 12)
        self.assertEqual(modp(104, 101), 4)

    def test_modp6(self):
        self.assertEqual(modp(8, 5), 8)
        self.assertEqual(modp(1106, 101), 7)
        self.assertEqual(modp(5, 101), 5)
        self.assertEqual(modp(3, 16), 13)
        self.assertEqual(modp(105, 101), 5)

    def test_modp7(self):
        self.assertEqual(modp(9, 5), 9)
        self.assertEqual(modp(1107, 101), 8)
        self.assertEqual(modp(6, 101), 6)
        self.assertEqual(modp(3, 17), 14)
        self.assertEqual(modp(106, 101), 6)

    def test_modp8(self):
        self.assertEqual(modp(10, 5), 10)
        self.assertEqual(modp(1108, 101), 9)
        self.assertEqual(modp(7, 101), 7)
        self.assertEqual(modp(3, 18), 15)
        self.assertEqual(modp(107, 101), 7)

    def test_modp9(self):
        self.assertEqual(modp(11, 5), 11)
        self.assertEqual(modp(1109, 101), 10)
        self.assertEqual(modp(8, 101), 8)
        self.assertEqual(modp(3, 19), 16)"
"

def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","class TestShiftCipher:
    def test_encode(self):
        assert encode_shift(""abc"") == ""fgh""
        assert encode_shift(""xyz"") == ""zab""
        assert encode_shift(""hello world"") == ""mjqqtbtwhgvqr""
        assert encode_shift(""a"") == ""f""
        assert encode_shift(""b"") == ""g""
        assert encode_shift(""c"") == ""h""
        assert encode_shift(""d"") == ""i""
        assert encode_shift(""e"") == ""j""
        assert encode_shift(""f"") == ""k""
        assert encode_shift(""g"") == ""l""
        assert encode_shift(""h"") == ""m""
        assert encode_shift(""i"") == ""n""
        assert encode_shift(""j"") == ""o""
        assert encode_shift(""k"") == ""p""
        assert encode_shift(""l"") == ""q""
        assert encode_shift(""m"") == ""r""
        assert encode_shift(""n"") == ""s""
        assert encode_shift(""o"") == ""t""
        assert encode_shift(""p"") == ""u""
        assert encode_shift(""q"") == ""v""
        assert encode_shift(""r"") == ""w""
        assert encode_shift(""s"") == ""x""
        assert encode_shift(""t"") == ""y""
        assert encode_shift(""u"") == ""z""
        assert encode_shift(""v"") == ""a""
        assert encode_shift(""w"") == ""b""
        assert encode_shift(""x"") == ""c""
        assert encode_shift(""y"") == ""d""
        assert encode_shift(""z"") == ""e""

    def test_decode(self):
        assert decode_shift(""fgh"") == ""abc""
        assert decode_shift(""zab"") == ""xyz""
        assert decode_shift(""mjqqtbtwhgvqr"") == ""hello world""
        assert decode_shift(""f"") == ""a""
        assert decode_shift(""g"") == ""b""
        assert decode_shift(""h"") == ""c""
        assert decode_shift(""i"") == ""d""
        assert decode_shift(""j"") == ""e""
        assert decode_shift(""k"") == ""f""
        assert decode_shift(""l"") == ""g""
        assert decode_shift(""m"") == ""h""
        assert decode_shift(""n"") == ""i""
        assert decode_shift(""o"") == ""j""
        assert decode_shift(""p"") == ""k""
        assert decode_shift(""q"") == ""l""
        assert decode_shift(""r"") == ""m""
        assert decode_shift(""s"") == ""n""
        assert decode_shift(""t"") == ""o""
        assert decode_shift(""u"") == ""p""
        assert decode_shift(""v"") == ""q""
        assert decode_shift(""w"") == ""r""
        assert decode_shift(""x"") == ""s""
        assert decode_shift(""y"") == ""t""
        assert decode_shift(""z"") == ""u""
        assert decode_shift(""a"") == ""v""
        assert decode_shift(""b"") == ""w""
        assert decode_shift(""c"") == ""x""
        assert decode_shift(""d"") == ""y""
        assert decode_shift(""e"") == ""z""

"
"

def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","class TestRemoveVowels(unittest.TestCase):
    def test_remove_vowels(self):
        self.assertEqual(remove_vowels(""""), """")
        self.assertEqual(remove_vowels(""abcdef\nghijklm""), ""bcdf\nghjklm"")
        self.assertEqual(remove_vowels(""abcdef""), ""bcdf"")
        self.assertEqual(remove_vowels(""aaaaa""), """")
        self.assertEqual(remove_vowels(""aaBAA""), ""B"")
        self.assertEqual(remove_vowels(""zbcd""), ""zbcd"")
"
"

def below_threshold(l: list, t: int):
    """"""Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","    for e in l:
        if e >= t:
            return False
    return True
","import unittest


class Test(unittest.TestCase):
    def test_below_threshold(self):
        self.assertTrue(below_threshold([1, 2, 4, 10], 100))
        self.assertFalse(below_threshold([1, 20, 4, 10], 5))
"
"

def add(x: int, y: int):
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","    return x + y
","class TestAdd:
    def test_add(self):
        self.assertEqual(add(2, 3), 5)
        self.assertEqual(add(5, 7), 12)
"
"

def same_chars(s0: str, s1: str):
    """"""
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","    return set(s0) == set(s1)
","class TestSameChars:
    def test_same_chars(self):
        self.assertTrue(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))
        self.assertTrue(same_chars('abcd', 'dddddddabc'))
        self.assertTrue(same_chars('dddddddabc', 'abcd'))
        self.assertFalse(same_chars('eabcd', 'dddddddabc'))
        self.assertFalse(same_chars('abcd', 'dddddddabce'))
        self.assertFalse(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))

    def test_same_chars2(self):
        self.assertTrue(same_chars('a', 'a'))
        self.assertTrue(same_chars('aa', 'aa'))
        self.assertFalse(same_chars('a', 'b'))
        self.assertFalse(same_chars('ab', 'ba'))
        self.assertFalse(same_chars('abc', 'cba'))
        self.assertTrue(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcba'))
        self.assertFalse(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbz'))
        self.assertTrue(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbaa'))
        self.assertFalse(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbaz'))
        self.assertTrue(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbaaa'))
        self.assertFalse(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbazz'))
        self.assertTrue(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbaaaa'))
        self.assertFalse(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbazzz'))
        self.assertTrue(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbaaaaa'))
        self.assertFalse(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbazzzz'))
        self.assertTrue(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbaaaaaa'))
        self.assertFalse(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbazzzzz'))
        self.assertTrue(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbaaaaaaa'))
        self.assertFalse(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbazzzzzz'))
        self.assertTrue(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbaaaaaaaa'))
        self.assertFalse(same_chars('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcbazzzzzzz'))"
"

def fib(n: int):
    """"""Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","import unittest


class TestFibonacci(unittest.TestCase):
    def test_fib_zero(self):
        self.assertEqual(fib(0), 0)

    def test_fib_one(self):
        self.assertEqual(fib(1), 1)

    def test_fib_two(self):
        self.assertEqual(fib(2), 1)

    def test_fib_three(self):
        self.assertEqual(fib(3), 2)

    def test_fib_four(self):
        self.assertEqual(fib(4), 3)

    def test_fib_five(self):
        self.assertEqual(fib(5), 5)

    def test_fib_six(self):
        self.assertEqual(fib(6), 8)

    def test_fib_seven(self):
        self.assertEqual(fib(7), 13)

    def test_fib_eight(self):
        self.assertEqual(fib(8), 21)

    def test_fib_nine(self):
        self.assertEqual(fib(9), 34)

    def test_fib_ten(self):
        self.assertEqual(fib(10), 55)
"
"

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","import unittest


class TestBracketing(unittest.TestCase):
    def test_correct_bracketing(self):
        self.assertFalse(correct_bracketing(""<""))
        self.assertTrue(correct_bracketing(""<>""))
        self.assertTrue(correct_bracketing(""<<><>>""))
        self.assertFalse(correct_bracketing(""><<>""))
"
"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","import unittest


class TestMonotonic(unittest.TestCase):
    def test_monotonic(self):
        self.assertTrue(monotonic([1, 2, 4, 20]))
        self.assertFalse(monotonic([1, 20, 4, 10]))
        self.assertTrue(monotonic([4, 1, 0, -10]))
        self.assertTrue(monotonic([-10, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
        self.assertFalse(monotonic([-10, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))
        self.assertTrue(monotonic([-10, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))
        self.assertFalse(monotonic([-10, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))
        self.assertTrue(monotonic([-10, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))
        self.assertFalse(monotonic([-10, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))
        self.assertTrue(monotonic([-10, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))
        self.assertFalse(monotonic([-10, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))
        self.assertTrue(monotonic([-10, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))
        self.assertFalse(monotonic([-10, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))
        self.assertTrue(monotonic([-10, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))
"
"

def common(l1: list, l2: list):
    """"""Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","class TestCommon(unittest.TestCase):
    def test_common(self):
        self.assertEqual(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]), [1, 5, 653])
        self.assertEqual(common([5, 3, 2, 8], [3, 2]), [2, 3])
"
"

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","import unittest


class TestLargestPrimeFactor(unittest.TestCase):
    def test_largest_prime_factor(self):
        self.assertEqual(largest_prime_factor(13195), 29)
        self.assertEqual(largest_prime_factor(2048), 2)
        self.assertEqual(largest_prime_factor(17), 17)
        self.assertEqual(largest_prime_factor(3), 3)
        self.assertEqual(largest_prime_factor(5), 5)
        self.assertEqual(largest_prime_factor(6), 2)
        self.assertEqual(largest_prime_factor(7), 7)
        self.assertEqual(largest_prime_factor(8), 2)
        self.assertEqual(largest_prime_factor(9), 3)
        self.assertEqual(largest_prime_factor(10), 5)
        self.assertEqual(largest_prime_factor(11), 11)
        self.assertEqual(largest_prime_factor(12), 2)
        self.assertEqual(largest_prime_factor(13), 13)
        self.assertEqual(largest_prime_factor(14), 2)
        self.assertEqual(largest_prime_factor(15), 3)
        self.assertEqual(largest_prime_factor(16), 2)
        self.assertEqual(largest_prime_factor(17), 17)
        self.assertEqual(largest_prime_factor(18), 2)
        self.assertEqual(largest_prime_factor(19), 19)
        self.assertEqual(largest_prime_factor(20), 2)
        self.assertEqual(largest_prime_factor(21), 7)
        self.assertEqual(largest_prime_factor(22), 2)
        self.assertEqual(largest_prime_factor(23), 23)
        self.assertEqual(largest_prime_factor(24), 2)
        self.assertEqual(largest_prime_factor(25), 5)
        self.assertEqual(largest_prime_factor(26), 2)
        self.assertEqual(largest_prime_factor(27), 27)
        self.assertEqual(largest_prime_factor(28), 2)
        self.assertEqual(largest_prime_factor(29), 29)
        self.assertEqual(largest_prime_factor(30), 2)
        self.assertEqual(largest_prime_factor(31), 31)
        self.assertEqual(largest_prime_factor(32), 2)
        self.assertEqual(largest_prime_factor(33), 33)
        self.assertEqual(largest_prime_factor(34), 2)
        self.assertEqual(largest_prime_factor(35), 5)
        self.assertEqual(largest_prime_factor(36), 2)
        self.assertEqual(largest_prime_factor(37), 37)
        self.assertEqual(largest_prime_factor(38), 2)
        self.assertEqual(largest_prime_factor(39), 39)
        self.assertEqual(largest_prime_factor(40), 2)
        self.assertEqual(largest_prime_factor(41), 41)
        self.assertEqual(largest_prime_factor(42), 2)
        self.assertEqual(largest_prime_factor(43), 43)
        self.assertEqual(largest_prime_factor(44), 2)
        self.assertEqual(largest_prime_factor(45), 5)
        self.assertEqual(largest_prime_factor(46), 2)
        self.assertEqual(largest_prime_factor(47), 47)
        self.assertEqual(largest_prime_factor(48), 2)"
"

def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","    return sum(range(n + 1))
","import unittest


class TestSumToN(unittest.TestCase):
    def test_sum_to_n(self):
        self.assertEqual(sum_to_n(30), 465)
        self.assertEqual(sum_to_n(100), 5050)
        self.assertEqual(sum_to_n(5), 15)
        self.assertEqual(sum_to_n(10), 55)
        self.assertEqual(sum_to_n(1), 1)

    def test_sum_to_n_negative(self):
        with self.assertRaises(ValueError):
            sum_to_n(-30)

    def test_sum_to_n_zero(self):
        with self.assertRaises(ValueError):
            sum_to_n(0)
"
"

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","import unittest


class TestBracketing(unittest.TestCase):
    def test_correct_bracketing(self):
        self.assertFalse(correct_bracketing(""(""))
        self.assertTrue(correct_bracketing(""()""))
        self.assertTrue(correct_bracketing(""(()())""))
        self.assertFalse(correct_bracketing("")(()""))


if __name__ == ""__main__"":
    unittest.main()"
"

def derivative(xs: list):
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","class TestDerivative(unittest.TestCase):
    def test_derivative(self):
        self.assertEqual(derivative([3, 1, 2, 4, 5]), [1, 4, 12, 20])
        self.assertEqual(derivative([1, 2, 3]), [2, 6])
        self.assertEqual(derivative([1, 2, 3, 4, 5]), [2, 6, 12, 20])
        self.assertEqual(derivative([1, 2, 3, 4, 5, 6]), [2, 6, 12, 20, 30])
        self.assertEqual(derivative([1, 2, 3, 4, 5, 6, 7]), [2, 6, 12, 20, 30, 42])
        self.assertEqual(derivative([1, 2, 3, 4, 5, 6, 7, 8]), [2, 6, 12, 20, 30, 42, 56])
        self.assertEqual(derivative([1, 2, 3, 4, 5, 6, 7, 8, 9]), [2, 6, 12, 20, 30, 42, 56, 72])
        self.assertEqual(derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [2, 6, 12, 20, 30, 42, 56, 72, 90])
        self.assertEqual(derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), [2, 6, 12, 20, 30, 42, 56, 72, 90, 110])
        self.assertEqual(derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132])
        self.assertEqual(derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 168])
        self.assertEqual(derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 168, 210])
        self.assertEqual(derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 168, 210, 264])"
"

def fibfib(n: int):
    """"""The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","import unittest


class TestFibFib(unittest.TestCase):
    def test_fibfib(self):
        self.assertEqual(fibfib(0), 0)
        self.assertEqual(fibfib(1), 0)
        self.assertEqual(fibfib(2), 1)
        self.assertEqual(fibfib(3), 2)
        self.assertEqual(fibfib(4), 5)
        self.assertEqual(fibfib(5), 4)
        self.assertEqual(fibfib(6), 9)
        self.assertEqual(fibfib(7), 18)
        self.assertEqual(fibfib(8), 24)
        self.assertEqual(fibfib(9), 39)
        self.assertEqual(fibfib(10), 63)
"
"
FIX = """"""
Add more test cases.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","class TestVowelCount(unittest.TestCase):
    def test_vowels_count(self):
        self.assertEqual(vowels_count(""abcde""), 2)
        self.assertEqual(vowels_count(""ACEDY""), 3)
        self.assertEqual(vowels_count(""a""), 1)
        self.assertEqual(vowels_count(""A""), 1)
        self.assertEqual(vowels_count(""abcd""), 2)
        self.assertEqual(vowels_count(""ABCD""), 2)
        self.assertEqual(vowels_count(""aBCD""), 2)
        self.assertEqual(vowels_count(""abcdey""), 3)
        self.assertEqual(vowels_count(""ACEDYy""), 4)
        self.assertEqual(vowels_count(""abcdy""), 3)
        self.assertEqual(vowels_count(""ABCDy""), 3)
        self.assertEqual(vowels_count(""aBCDy""), 3)
"
"
def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","import unittest

class TestCircularShift(unittest.TestCase):
    def test_circular_shift(self):
        self.assertEqual(circular_shift(12, 1), ""21"")
        self.assertEqual(circular_shift(12, 2), ""12"")
        self.assertEqual(circular_shift(1234567890, 1), ""2345678901"")
        self.assertEqual(circular_shift(1234567890, 2), ""3456789012"")
        self.assertEqual(circular_shift(1234567890, 3), ""4567890123"")
        self.assertEqual(circular_shift(1234567890, 4), ""5678901234"")
        self.assertEqual(circular_shift(1234567890, 5), ""6789012345"")
        self.assertEqual(circular_shift(1234567890, 6), ""7890123456"")
        self.assertEqual(circular_shift(1234567890, 7), ""8901234567"")
        self.assertEqual(circular_shift(1234567890, 8), ""9012345678"")
        self.assertEqual(circular_shift(1234567890, 9), ""0123456789"")
        self.assertEqual(circular_shift(1234567890, 10), ""1234567890"")
        self.assertEqual(circular_shift(1234567890, 11), ""2345678901"")
        self.assertEqual(circular_shift(1234567890, 12), ""3456789012"")
        self.assertEqual(circular_shift(1234567890, 13), ""4567890123"")
        self.assertEqual(circular_shift(1234567890, 14), ""5678901234"")
        self.assertEqual(circular_shift(1234567890, 15), ""6789012345"")
        self.assertEqual(circular_shift(1234567890, 16), ""7890123456"")
        self.assertEqual(circular_shift(1234567890, 17), ""8901234567"")
        self.assertEqual(circular_shift(1234567890, 18), ""9012345678"")
        self.assertEqual(circular_shift(1234567890, 19), ""0123456789"")
        self.assertEqual(circular_shift(1234567890, 20), ""1234567890"")
        self.assertEqual(circular_shift(1234567890, 21), ""2345678901"")
        self.assertEqual(circular_shift(1234567890, 22), ""3456789012"")
        self.assertEqual(circular_shift(1234567890, 23), ""4567890123"")
        self.assertEqual(circular_shift(1234567890, 24), ""5678901234"")"
"
def digitSum(s):
    """"""Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
    """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","import unittest

class TestDigitSum(unittest.TestCase):
    def test_digitSum(self):
        self.assertEqual(digitSum(""""), 0)
        self.assertEqual(digitSum(""abAB""), 131)
        self.assertEqual(digitSum(""abcCd""), 67)
        self.assertEqual(digitSum(""helloE""), 69)
        self.assertEqual(digitSum(""woArBld""), 131)
        self.assertEqual(digitSum(""aAaaaXa""), 153)
"
"
def fruit_distribution(s,n):
    """"""
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
    fruit_distribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
    fruit_distribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
    fruit_distribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
    """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","import unittest
class TestFruitDistribution(unittest.TestCase):
    def test_fruit_distribution(self):
        self.assertEqual(fruit_distribution(""5 apples and 6 oranges"", 19), 8)
        self.assertEqual(fruit_distribution(""0 apples and 1 oranges"",3), 2)
        self.assertEqual(fruit_distribution(""2 apples and 3 oranges"", 100), 95)
        self.assertEqual(fruit_distribution(""100 apples and 1 oranges"",120), 19)
        self.assertEqual(fruit_distribution(""100 apples and 1 oranges"",120), 19)
        self.assertEqual(fruit_distribution(""100 apples and 1 oranges"",120), 19)
        self.assertEqual(fruit_distribution(""100 apples and 1 oranges"",120), 19)
        self.assertEqual(fruit_distribution(""100 apples and 1 oranges"",120), 19)
        self.assertEqual(fruit_distribution(""100 apples and 1 oranges"",120), 19)
        self.assertEqual(fruit_distribution(""100 apples and 1 oranges"",120), 19)
        self.assertEqual(fruit_distribution(""100 apples and 1 oranges"",120), 19)
"
"
def pluck(arr):
    """"""
    ""Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """"""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","import unittest
class TestPluck(unittest.TestCase):
    def test_pluck(self):
        self.assertEqual(pluck([4,2,3]), [2, 1])
        self.assertEqual(pluck([1,2,3]), [2, 1])
        self.assertEqual(pluck([]), [])
        self.assertEqual(pluck([5, 0, 3, 0, 4, 2]), [0, 1])
"
"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","import unittest
class TestSearch(unittest.TestCase):
    def test_search(self):
        self.assertEqual(search([4, 1, 2, 2, 3, 1]), 2)
        self.assertEqual(search([1, 2, 2, 3, 3, 3, 4, 4, 4]), 3)
        self.assertEqual(search([5, 5, 4, 4, 4]), -1)
        self.assertEqual(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 10)
        self.assertEqual(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 16)
        self.assertEqual(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]), -1)
        self.assertEqual(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]), -1)
        self.assertEqual(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]), -1)
        self.assertEqual(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), -1)
        self.assertEqual(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]), -1)
        self.assertEqual(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]), -1)
        self.assertEqual(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]), -1)
        self.assertEqual(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]), -1)
        self.assertEqual(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]), -1)
"
"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","import unittest


class TestStrangeSortList(unittest.TestCase):
    def test_strange_sort_list(self):
        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])
        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])
        self.assertEqual(strange_sort_list([]), [])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5]), [1, 5, 2, 4, 3])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6]), [1, 6, 2, 5, 3, 4])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6, 7]), [1, 7, 2, 6, 3, 5, 4])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8]), [1, 8, 2, 7, 3, 6, 5, 4])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]), [1, 9, 2, 8, 3, 7, 6, 5, 4])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 10, 2, 9, 3, 8, 7, 6, 5, 4])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), [1, 11, 2, 10, 3, 9, 8, 7, 6, 5, 4])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), [1, 12, 2, 11, 3, 10, 8, 9, 7, 6, 5, 4])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), [1, 13, 2, 12, 3, 11, 8, 9, 7, 6, 5, 4])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), [1, 14, 2, 13, 3, 12, 8, 9, 7, 6, 5, 4])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), [1, 15, 2, 14, 3, 13, 8, 9, 7, 6, 5, 4])
"
"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","import unittest
class TestTriangleArea(unittest.TestCase):
    def test_triangle_area(self):
        self.assertEqual(triangle_area(3, 4, 5), 6.0)
        self.assertEqual(triangle_area(1, 2, 10), -1)
        self.assertEqual(triangle_area(1, 2, 3), 2.0)
        self.assertEqual(triangle_area(5, 4, 3), 6.0)
        self.assertEqual(triangle_area(1, 1, 1), -1)
        self.assertEqual(triangle_area(1, 1, 2), -1)
        self.assertEqual(triangle_area(1, 2, 3), 2.0)
        self.assertEqual(triangle_area(5, 4, 3), 6.0)
        self.assertEqual(triangle_area(1, 1, 1), -1)
        self.assertEqual(triangle_area(1, 1, 2), -1)
        self.assertEqual(triangle_area(1, 2, 3), 2.0)
        self.assertEqual(triangle_area(5, 4, 3), 6.0)
"
"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","import unittest
class Test(unittest.TestCase):
    def test_case_00(self):
        self.assertEqual(will_it_fly([1, 2], 5), False)

    def test_case_01(self):
        self.assertEqual(will_it_fly([3, 2, 3], 1), False)

    def test_case_02(self):
        self.assertEqual(will_it_fly([3, 2, 3], 9), True)

    def test_case_03(self):
        self.assertEqual(will_it_fly([3], 5), True)

    def test_case_04(self):
        self.assertEqual(will_it_fly([1, 2, 3], 6), False)

    def test_case_05(self):
        self.assertEqual(will_it_fly([1, 2, 3], 7), True)

    def test_case_06(self):
        self.assertEqual(will_it_fly([1, 2, 3], 8), False)

    def test_case_07(self):
        self.assertEqual(will_it_fly([1, 2, 3], 9), True)

    def test_case_08(self):
        self.assertEqual(will_it_fly([1, 2, 3], 10), False)

    def test_case_09(self):
        self.assertEqual(will_it_fly([1, 2, 3], 11), True)
"
"
def smallest_change(arr):
    """"""
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","import unittest


class TestSmallestChange(unittest.TestCase):
    def test_smallest_change(self):
        self.assertEqual(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]), 4)
        self.assertEqual(smallest_change([1, 2, 3, 4, 3, 2, 2]), 1)
        self.assertEqual(smallest_change([1, 2, 3, 2, 1]), 0)
        self.assertEqual(smallest_change([1, 2, 3, 5, 4, 7, 9, 6, 8]), 4)
        self.assertEqual(smallest_change([1, 2, 3, 5, 4, 7, 9, 6, 8, 7]), 4)
        self.assertEqual(smallest_change([1, 2, 3, 5, 4, 7, 9, 6, 8, 7, 6]), 4)
        self.assertEqual(smallest_change([1, 2, 3, 5, 4, 7, 9, 6, 8, 7, 6, 5]), 4)
        self.assertEqual(smallest_change([1, 2, 3, 5, 4, 7, 9, 6, 8, 7, 6, 5, 4]), 4)
        self.assertEqual(smallest_change([1, 2, 3, 5, 4, 7, 9, 6, 8, 7, 6, 5, 4, 3]), 4)
        self.assertEqual(smallest_change([1, 2, 3, 5, 4, 7, 9, 6, 8, 7, 6, 5, 4, 3, 2]), 4)
        self.assertEqual(smallest_change([1, 2, 3, 5, 4, 7, 9, 6, 8, 7, 6, 5, 4, 3, 2, 1]), 4)
"
"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","import unittest
class Test(unittest.TestCase):
    def test_case_00(self):
        self.assertEqual(total_match([], []), [])
    def test_case_01(self):
        self.assertEqual(total_match(['hi', 'admin'], ['hI', 'Hi']), ['hI', 'Hi'])
    def test_case_02(self):
        self.assertEqual(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin'])
    def test_case_03(self):
        self.assertEqual(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']), ['hI', 'hi', 'hi'])
    def test_case_04(self):
        self.assertEqual(total_match(['4'], ['1', '2', '3', '4', '5']), ['4'])
    def test_case_05(self):
        self.assertEqual(total_match(['hi', 'admin'], []), [])
    def test_case_06(self):
        self.assertEqual(total_match([], ['hI', 'Hi']), [])
    def test_case_07(self):
        self.assertEqual(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project', 'hi']), ['hi', 'admin'])
    def test_case_08(self):
        self.assertEqual(total_match(['hi', 'admin'], ['hI', 'hi', 'hi', 'admin', 'project']), ['hI', 'hi', 'hi', 'admin', 'project'])
    def test_case_09(self):
        self.assertEqual(total_match(['hi', 'admin'], ['hI', 'hi', 'hi', 'admin', 'project', 'hi']), ['hI', 'hi', 'hi', 'admin', 'project'])
"
"
def is_multiply_prime(a):
    """"""Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","import unittest
class TestIsMultiplyPrime(unittest.TestCase):
    def test_is_multiply_prime(self):
        self.assertTrue(is_multiply_prime(30))
        self.assertFalse(is_multiply_prime(25))
        self.assertFalse(is_multiply_prime(18))
        self.assertFalse(is_multiply_prime(45))
        self.assertTrue(is_multiply_prime(300))
        self.assertFalse(is_multiply_prime(270))
        self.assertFalse(is_multiply_prime(180))
        self.assertFalse(is_multiply_prime(450))
        self.assertTrue(is_multiply_prime(3000))
        self.assertFalse(is_multiply_prime(2700))
        self.assertFalse(is_multiply_prime(1800))
        self.assertFalse(is_multiply_prime(4500))

"
"
def is_simple_power(x, n):
    """"""Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","import unittest
class Test(unittest.TestCase):
    def test_is_simple_power(self):
        self.assertTrue(is_simple_power(1, 4))
        self.assertTrue(is_simple_power(2, 2))
        self.assertTrue(is_simple_power(8, 2))
        self.assertFalse(is_simple_power(3, 2))
        self.assertFalse(is_simple_power(3, 1))
        self.assertFalse(is_simple_power(5, 3))
"
"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","import unittest

class TestCube(unittest.TestCase):
    def test_iscube(self):
        self.assertTrue(iscube(-1))
        self.assertFalse(iscube(2))
        self.assertTrue(iscube(0))
        self.assertTrue(iscube(64))
        self.assertTrue(iscube(180))
        self.assertFalse(iscube(3))
        self.assertFalse(iscube(-9))
        self.assertFalse(iscube(27))
        self.assertFalse(iscube(56))
        self.assertFalse(iscube(108))
        self.assertTrue(iscube(125))

"
"
def hex_key(num):
    """"""You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = ""AB"" the output should be 1.
    For num = ""1077E"" the output should be 2.
    For num = ""ABED1A33"" the output should be 4.
    For num = ""123456789ABCDEF0"" the output should be 6.
    For num = ""2020"" the output should be 2.
    """"""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","import unittest

class TestHexKey(unittest.TestCase):
    def test_hex_key(self):
        self.assertEqual(hex_key(""AB""), 1)
        self.assertEqual(hex_key(""1077E""), 2)
        self.assertEqual(hex_key(""ABED1A33""), 4)
        self.assertEqual(hex_key(""123456789ABCDEF0""), 6)
        self.assertEqual(hex_key(""2020""), 2)
"
"
def decimal_to_binary(decimal):
    """"""You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns ""db1111db""
    decimal_to_binary(32)   # returns ""db100000db""
    """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","import unittest


class TestDecimalToBinary(unittest.TestCase):
    def test_decimal_to_binary(self):
        self.assertEqual(decimal_to_binary(15), ""db1111db"")
        self.assertEqual(decimal_to_binary(32), ""db100000db"")
        self.assertEqual(decimal_to_binary(49), ""db111001db"")
        self.assertEqual(decimal_to_binary(56), ""db111100db"")
        self.assertEqual(decimal_to_binary(72), ""db1000000db"")
        self.assertEqual(decimal_to_binary(89), ""db1110001db"")
        self.assertEqual(decimal_to_binary(96), ""db1111000db"")
        self.assertEqual(decimal_to_binary(123), ""db1110101db"")
        self.assertEqual(decimal_to_binary(147), ""db1111101db"")
        self.assertEqual(decimal_to_binary(156), ""db1111110db"")
"
"
def is_happy(s):
    """"""You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","import unittest
class Test(unittest.TestCase):
    def test_is_happy(self):
        self.assertEqual(is_happy(""a""), False)
        self.assertEqual(is_happy(""aa""), False)
        self.assertEqual(is_happy(""abcd""), True)
        self.assertEqual(is_happy(""aabb""), False)
        self.assertEqual(is_happy(""adb""), True)
        self.assertEqual(is_happy(""xyy""), False)
        self.assertEqual(is_happy(""abcdefghijklmnopqrstuvwxyz""), True)
"
"
def numerical_letter_grade(grades):
    """"""It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","import unittest
class TestNumericalLetterGrade(unittest.TestCase):
    def test_numerical_letter_grade(self):
        self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), ['A+', 'B', 'C-', 'C', 'A-'])
        self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), ['A+', 'B', 'C-', 'C', 'A-'])
        self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), ['A+', 'B', 'C-', 'C', 'A-'])
        self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), ['A+', 'B', 'C-', 'C', 'A-'])
        self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), ['A+', 'B', 'C-', 'C', 'A-'])
        self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), ['A+', 'B', 'C-', 'C', 'A-'])
        self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), ['A+', 'B', 'C-', 'C', 'A-'])
        self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), ['A+', 'B', 'C-', 'C', 'A-'])
        self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), ['A+', 'B', 'C-', 'C', 'A-'])
        self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), ['A+', 'B', 'C-', 'C', 'A-'])
        "
"
def prime_length(string):
    """"""Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","import unittest


class TestPrimeLength(unittest.TestCase):
    def test_prime_length(self):
        self.assertTrue(prime_length('Hello'))
        self.assertTrue(prime_length('abcdcba'))
        self.assertTrue(prime_length('kittens'))
        self.assertFalse(prime_length('orange'))
        self.assertFalse(prime_length(''))
        self.assertFalse(prime_length('a'))
        self.assertFalse(prime_length('ab'))
        self.assertTrue(prime_length('abcdefghijklmnopqrstuvwxyz'))
        self.assertTrue(prime_length('abcdefghijklmnopqrstuvwxyza'))
        self.assertFalse(prime_length('abcdefghijklmnopqrstuvwxyzaa'))

"
"
def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","import unittest

class Test(unittest.TestCase):
    def test_starts_one_ends(self):
        self.assertEqual(starts_one_ends(1), 1)
        self.assertEqual(starts_one_ends(2), 9)
        self.assertEqual(starts_one_ends(3), 81)
        self.assertEqual(starts_one_ends(4), 729)
        self.assertEqual(starts_one_ends(5), 6561)
        self.assertEqual(starts_one_ends(6), 59049)
        self.assertEqual(starts_one_ends(7), 531441)
        self.assertEqual(starts_one_ends(8), 4782969)
        self.assertEqual(starts_one_ends(9), 42536679)
        self.assertEqual(starts_one_ends(10), 372451989)
"
"
def solve(N):
    """"""Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","import unittest


class TestSolution(unittest.TestCase):
    def test_solve(self):
        self.assertEqual(solve(1000), ""1"")
        self.assertEqual(solve(150), ""110"")
        self.assertEqual(solve(147), ""1100"")
        self.assertEqual(solve(239), ""101111"")
        self.assertEqual(solve(1000000000), ""11111111111111111111111111111111"")
"
"
def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","import unittest
class TestAdd(unittest.TestCase):
    def test_add(self):
        self.assertEqual(add([4, 2, 6, 7]), 2)
        self.assertEqual(add([1, 3, 5, 7]), 0)
        self.assertEqual(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 30)
        self.assertEqual(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 60)
        self.assertEqual(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]), 60)
        self.assertEqual(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]), 60)
        self.assertEqual(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]), 60)
        self.assertEqual(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 60)
        self.assertEqual(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]), 60)
        self.assertEqual(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]), 60)
        self.assertEqual(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]), 60)
        self.assertEqual(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]), 60)
        self.assertEqual(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]), 60)
"
"
def anti_shuffle(s):
    """"""
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","import unittest


class TestAntiShuffle(unittest.TestCase):
    def setUp(self):
        self.test_cases = [('Hi', 'Hi'), ('hello', 'ehllo'), ('Hello World!!!', 'Hello !!!Wdlor')]

    def test_anti_shuffle(self):
        for i in range(len(self.test_cases)):
            self.assertEqual(anti_shuffle(self.test_cases[i][0]), self.test_cases[i][1])

"
"
def get_row(lst, x):
    """"""
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","import unittest


class Test(unittest.TestCase):
    def test_get_row(self):
        self.assertEqual(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),
                         [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])
        self.assertEqual(get_row([], 1), [])
        self.assertEqual(get_row([[], [1], [1, 2, 3]], 3), [(2, 2)])

"
"
def sort_array(array):
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","import unittest
class TestSortArray(unittest.TestCase):
    def test_sort_array(self):
        self.assertEqual([], sort_array([]))
        self.assertEqual([5], sort_array([5]))
        self.assertEqual([0, 1, 2, 3, 4, 5], sort_array([2, 4, 3, 0, 1, 5]))
        self.assertEqual([6, 5, 4, 3, 2, 1, 0], sort_array([2, 4, 3, 0, 1, 5, 6]))
        self.assertEqual([1, 2, 3, 4, 5, 6, 7], sort_array([1, 2, 3, 4, 5, 6, 7]))
        self.assertEqual([0, 1, 2, 3, 4, 5, 6], sort_array([0, 1, 2, 3, 4, 5, 6]))
        self.assertEqual([1, 2, 3, 4, 5, 6, 7], sort_array([1, 2, 3, 4, 5, 6, 7]))
        self.assertEqual([0, 1, 2, 3, 4, 5, 6], sort_array([0, 1, 2, 3, 4, 5, 6]))
        self.assertEqual([1, 2, 3, 4, 5, 6, 7], sort_array([1, 2, 3, 4, 5, 6, 7]))
        self.assertEqual([0, 1, 2, 3, 4, 5, 6], sort_array([0, 1, 2, 3, 4, 5, 6]))
        self.assertEqual([1, 2, 3, 4, 5, 6, 7], sort_array([1, 2, 3, 4, 5, 6, 7]))

"
"
def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","import unittest
class TestEncrypt(unittest.TestCase):
    def test_encrypt(self):
        self.assertEqual(encrypt('hi'), 'lm')
        self.assertEqual(encrypt('asdfghjkl'), 'ewhjklnop')
        self.assertEqual(encrypt('gf'), 'kj')
        self.assertEqual(encrypt('et'), 'ix')
        self.assertEqual(encrypt('abcdefghijklmnopqrstuvwxyz'), 'cdefghijklmnopqrstuvwxyza')
        self.assertEqual(encrypt('ABCDEFGHIJKLMNOPQRSTUVWXYZ'), 'CDEFGHIJKLMNOPQRSTUVWXYZA')
        self.assertEqual(encrypt('1234567890'), '3456789012')
        self.assertEqual(encrypt('!@#$%^&*()'), '!@#$%^&*()')
        self.assertEqual(encrypt(''), '')
        self.assertEqual(encrypt('a'), 'c')
        self.assertEqual(encrypt('z'), 'b')

"
"
def next_smallest(lst):
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","import unittest

class TestNextSmallest(unittest.TestCase):
    def test_next_smallest(self):
        self.assertEqual(next_smallest([1, 2, 3, 4, 5]), 2)
        self.assertEqual(next_smallest([5, 1, 4, 3, 2]), 2)
        self.assertIsNone(next_smallest([]))
        self.assertIsNone(next_smallest([1, 1]))
"
"
def is_bored(S):
    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","import unittest
class TestIsBored(unittest.TestCase):
    def test_is_bored(self):
        self.assertEqual(is_bored(""Hello world""), 0)
        self.assertEqual(is_bored(""The sky is blue. The sun is shining. I love this weather""), 1)
        self.assertEqual(is_bored(""I am bored. I am tired of being bored.""), 2)
        self.assertEqual(is_bored(""I am bored. I am tired of being bored. I am bored.""), 3)
        self.assertEqual(is_bored(""I am bored. I am tired of being bored. I am bored. I am bored.""), 4)
        self.assertEqual(is_bored(""I am bored. I am tired of being bored. I am bored. I am bored. I am bored.""), 5)
        self.assertEqual(is_bored(""I am bored. I am tired of being bored. I am bored. I am bored. I am bored. I am bored.""), 6)
        self.assertEqual(is_bored(""I am bored. I am tired of being bored. I am bored. I am bored. I am bored. I am bored. I am bored.""), 7)
        self.assertEqual(is_bored(""I am bored. I am tired of being bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.""), 8)
        self.assertEqual(is_bored(""I am bored. I am tired of being bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.""), 9)
        self.assertEqual(is_bored(""I am bored. I am tired of being bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.""), 10)
        self.assertEqual(is_bored(""I am bored. I am tired of being bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.""), 11)
        self.assertEqual(is_bored(""I am bored. I am tired of being bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.""), 12)
        self.assertEqual(is_bored(""I am bored. I am tired of being bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.""), 13)
        self.assertEqual(is_bored(""I am bored. I am tired of being bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.""), 14)
        self.assertEqual(is_bored(""I am bored. I am tired of being bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.""), 15)
"
"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","import unittest
class Test(unittest.TestCase):
    def test_any_int(self):
        self.assertEqual(any_int(5,2,7),True)
        self.assertEqual(any_int(3,2,2),False)
        self.assertEqual(any_int(3,-2,1),True)
        self.assertEqual(any_int(3.6,-2.2,2),False)
        "
"
def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","import unittest
class TestEncode(unittest.TestCase):
    def test_encode(self):
        self.assertEqual(encode('test'), 'TGST')
        self.assertEqual(encode('This is a message'), 'tHKS KS C MGSSCGG')
        self.assertEqual(encode('a'), 'c')
        self.assertEqual(encode('A'), 'C')
        self.assertEqual(encode('e'), 'g')
        self.assertEqual(encode('E'), 'G')
        self.assertEqual(encode('i'), 'k')
        self.assertEqual(encode('I'), 'K')
        self.assertEqual(encode('o'), 's')
        self.assertEqual(encode('O'), 'S')
        self.assertEqual(encode('u'), 'w')
        self.assertEqual(encode('U'), 'W')
"
"

def skjkasdkd(lst):
    """"""You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","import unittest
class TestSumOfDigitsInLargestPrime(unittest.TestCase):
    def test_sum_of_digits_in_largest_prime(self):
        self.assertEqual(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]), 10)
        self.assertEqual(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]), 25)
        self.assertEqual(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]), 13)
        self.assertEqual(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]), 11)
        self.assertEqual(skjkasdkd([0,81,12,3,1,21]), 3)
        self.assertEqual(skjkasdkd([0,8,1,2,1,7]), 7)
"
"
def check_dict_case(dict):
    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
    check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
    check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
    check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
    check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
    """"""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","import unittest
class Test(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(check_dict_case({""a"":""apple"", ""b"":""banana""}), True)
    def test_case_2(self):
        self.assertEqual(check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}), False)
    def test_case_3(self):
        self.assertEqual(check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}), False)
    def test_case_4(self):
        self.assertEqual(check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}), False)
    def test_case_5(self):
        self.assertEqual(check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }), True)
    def test_case_6(self):
        self.assertEqual(check_dict_case({}), False)
    def test_case_7(self):
        self.assertEqual(check_dict_case({""a"": 1, ""b"": 2}), False)
    def test_case_8(self):
        self.assertEqual(check_dict_case({""A"": 1, ""B"": 2}), True)
    def test_case_9(self):
        self.assertEqual(check_dict_case({""a"": 1, ""b"": 2, ""c"": 3}), False)
    def test_case_10(self):
        self.assertEqual(check_dict_case({""A"": 1, ""B"": 2, ""C"": 3}), True)
"
"
def count_up_to(n):
    """"""Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","import unittest
class TestCountUpTo(unittest.TestCase):
    def test_count_up_to(self):
        self.assertEqual(count_up_to(5), [2,3])
        self.assertEqual(count_up_to(11), [2,3,5,7])
        self.assertEqual(count_up_to(0), [])
        self.assertEqual(count_up_to(20), [2,3,5,7,11,13,17,19])
        self.assertEqual(count_up_to(1), [])
        self.assertEqual(count_up_to(18), [2,3,5,7,11,13,17])
"
"
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
","    return abs(a % 10) * abs(b % 10)
","import unittest


class TestMultiply(unittest.TestCase):
    def test_multiply(self):
        self.assertEqual(multiply(148, 412), 16)
        self.assertEqual(multiply(19, 28), 72)
        self.assertEqual(multiply(2020, 1851), 0)
        self.assertEqual(multiply(14, -15), 20)
"
"
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","import unittest
class Test(unittest.TestCase):
    def test_count_upper(self):
        self.assertEqual(count_upper('aBCdEf'), 1)
        self.assertEqual(count_upper('abcdefg'), 0)
        self.assertEqual(count_upper('dBBE'), 0)
        self.assertEqual(count_upper('A'), 1)
        self.assertEqual(count_upper('a'), 0)
        self.assertEqual(count_upper('ABCD'), 2)
        self.assertEqual(count_upper('abcd'), 0)
        self.assertEqual(count_upper('ABCDE'), 1)
        self.assertEqual(count_upper('abcde'), 0)"
"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","import unittest
class TestClosestInteger(unittest.TestCase):
    def test_closest_integer(self):
        self.assertEqual(closest_integer(""10""), 10)
        self.assertEqual(closest_integer(""15.3""), 15)
        self.assertEqual(closest_integer(""-14.5""), -15)
        self.assertEqual(closest_integer(""14.5""), 15)
        self.assertEqual(closest_integer(""0.5""), 1)
        self.assertEqual(closest_integer(""-0.5""), -1)
        self.assertEqual(closest_integer(""0.25""), 0)
        self.assertEqual(closest_integer(""-0.25""), 0)
        self.assertEqual(closest_integer(""0.75""), 1)
        self.assertEqual(closest_integer(""-0.75""), -1)
        self.assertEqual(closest_integer(""14.3""), 14)
        self.assertEqual(closest_integer(""-14.3""), -14)
        self.assertEqual(closest_integer(""14.8""), 15)
        self.assertEqual(closest_integer(""-14.8""), -15)
        self.assertEqual(closest_integer(""14.2""), 14)
        self.assertEqual(closest_integer(""-14.2""), -14)
        self.assertEqual(closest_integer(""14.7""), 15)
        self.assertEqual(closest_integer(""-14.7""), -15)
        self.assertEqual(closest_integer(""14.1""), 14)
        self.assertEqual(closest_integer(""-14.1""), -14)
        self.assertEqual(closest_integer(""14.6""), 15)
        self.assertEqual(closest_integer(""-14.6""), -15)
        self.assertEqual(closest_integer(""14.0""), 14)
        self.assertEqual(closest_integer(""-14.0""), -14)
        self.assertEqual(closest_integer(""14.9""), 15)
        self.assertEqual(closest_integer(""-14.9""), -15)
        self.assertEqual(closest_integer(""14.4""), 14)
        self.assertEqual(closest_integer(""-14.4""), -14)
        self.assertEqual(closest_integer(""14.9""), 15)
        self.assertEqual(closest_integer(""-14.9""), -15)
        self.assertEqual(closest_integer(""14.3""), 14)
        self.assertEqual(closest_integer(""-14.3""), -14)
        self.assertEqual(closest_integer(""14.8""), 15)
        self.assertEqual(closest_integer(""-14.8""), -15)
        self.assertEqual(closest_integer(""14.2""), 14)
        self.assertEqual(closest_integer(""-14.2""), -14)
        self.assertEqual(closest_integer(""14.7""), 15)
        self.assertEqual(closest_integer(""-14.7""), -15)
        self.assertEqual(closest_integer(""14.1""), 14)
        self.assertEqual(closest_integer(""-14.1""), -14)
        self.assertEqual(closest_integer(""14.6""), 15)
        self.assertEqual(closest_integer(""-14.6""), -15)
        self.assertEqual(closest_integer(""14.0""), 14)
        self.assertEqual(closest_integer(""-14.0""), -14)
        self.assertEqual(closest_integer(""14.9""), 15)
        self.assertEqual(closest_integer(""-14.9""), -15)"
"
def make_a_pile(n):
    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","    return [n + 2*i for i in range(n)]
","class TestMakeAPile(unittest.TestCase):
    def test_make_a_pile(self):
        self.assertEqual(make_a_pile(3), [3, 5, 7])
        self.assertEqual(make_a_pile(4), [4, 6, 8, 10])
        self.assertEqual(make_a_pile(5), [5, 7, 9, 11, 13])
        self.assertEqual(make_a_pile(6), [6, 8, 10, 12, 14, 16])
        self.assertEqual(make_a_pile(7), [7, 9, 11, 13, 15, 17, 19])
        self.assertEqual(make_a_pile(8), [8, 10, 12, 14, 16, 18, 20, 22])
        self.assertEqual(make_a_pile(9), [9, 11, 13, 15, 17, 19, 21, 23, 25])
        self.assertEqual(make_a_pile(10), [10, 12, 14, 16, 18, 20, 22, 24, 26, 28])
        self.assertEqual(make_a_pile(11), [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31])
        self.assertEqual(make_a_pile(12), [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34])
        self.assertEqual(make_a_pile(13), [13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37])
        self.assertEqual(make_a_pile(14), [14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40])
        self.assertEqual(make_a_pile(15), [15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43])
        self.assertEqual(make_a_pile(16), [16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46])
        self.assertEqual(make_a_pile(17), [17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49])
        self.assertEqual(make_a_pile(18), [18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52])"
"
def words_string(s):
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","import unittest

class TestWordsString(unittest.TestCase):
    def test_words_string(self):
        self.assertEqual(words_string(""Hi, my name is John""), [""Hi"", ""my"", ""name"", ""is"", ""John""])
        self.assertEqual(words_string(""One, two, three, four, five, six""), [""One"", ""two"", ""three"", ""four"", ""five"", ""six""])
        self.assertEqual(words_string(""Hello world!""), [""Hello"", ""world!""])
        self.assertEqual(words_string(""Hello world! How are you?""), [""Hello"", ""world!"", ""How"", ""are"", ""you?""])
        self.assertEqual(words_string(""""), [])
        self.assertEqual(words_string(""Hi, my name is John, how are you? I'm fine.""), [""Hi"", ""my"", ""name"", ""is"", ""John"", ""how"", ""are"", ""you?"", ""I'm"", ""fine.""])
        self.assertEqual(words_string(""Hello world! How are you? I'm fine, thank you!""), [""Hello"", ""world!"", ""How"", ""are"", ""you?"", ""I'm"", ""fine,"", ""thank"", ""you!""])
        self.assertEqual(words_string(""Hi, my name is John, how are you? I'm fine, thank you! How are you?""), [""Hi"", ""my"", ""name"", ""is"", ""John"", ""how"", ""are"", ""you?"", ""I'm"", ""fine,"", ""thank"", ""you!"", ""How"", ""are"", ""you?""])
        self.assertEqual(words_string(""Hello world! How are you? I'm fine, thank you! How are you? I'm fine.""), [""Hello"", ""world!"", ""How"", ""are"", ""you?"", ""I'm"", ""fine,"", ""thank"", ""you!"", ""How"", ""are"", ""you?"", ""I'm"", ""fine.""])
        self.assertEqual(words_string(""Hello world! How are you? I'm fine, thank you! How are you? I'm fine, thank you!""), [""Hello"", ""world!"", ""How"", ""are"", ""you?"", ""I'm"", ""fine,"", ""thank"", ""you!"", ""How"", ""are"", ""you?"", ""I'm"", ""fine,"", ""thank"", ""you!""])
        self.assertEqual(words_string(""Hello world! How are you? I'm fine, thank you! How are you? I'm fine, thank you! How are you?""), [""Hello"", ""world!"", ""How"", ""are"", ""you?"", ""I'm"", ""fine,"", ""thank"", ""you!"", ""How"", ""are"", ""you?"", ""I'm"", ""fine,"", ""thank"", ""you!"", ""How"", ""are"", ""you?""])
        self.assertEqual(words_string(""Hello world! How are you? I'm fine, thank you! How are you? I'm fine, thank you! How are you? I'm fine.""), [""Hello"", ""world!"", ""How"", ""are"", ""you?"", ""I'm"", ""fine,"", ""thank"", ""you!"", ""How"", ""are"", ""you?"", ""I'm"", ""fine,"", ""thank"", ""you!"", ""How"", ""are"", ""you?"", ""I'm"", ""fine.""])
        self.assertEqual(words_string(""Hello world! How are you? I'm fine, thank you! How are you? I'm fine, thank you! How are you? I'm fine, thank you!""), [""Hello"", ""world!"", ""How"", ""are"", ""you?"", ""I'm"", ""fine,"", ""thank"", ""you!"", ""How"", ""are"", ""you?"", ""I'm"", ""fine,"", ""thank"", ""you!"", ""How"", ""are"", ""you?"", ""I'm"", ""fine,"", ""thank"", ""you!""])"
"
def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","import unittest

class TestChooseNum(unittest.TestCase):
    def test_choose_num(self):
        self.assertEqual(choose_num(12, 15), 14)
        self.assertEqual(choose_num(13, 12), -1)
        self.assertEqual(choose_num(10, 10), -1)
        self.assertEqual(choose_num(10, 11), 10)
        self.assertEqual(choose_num(10, 12), 10)
        self.assertEqual(choose_num(10, 13), -1)
        self.assertEqual(choose_num(10, 14), 12)
        self.assertEqual(choose_num(10, 15), 14)
        self.assertEqual(choose_num(10, 16), -1)
        self.assertEqual(choose_num(10, 17), -1)
"
"
def rounded_avg(n, m):
    """"""You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => ""0b11""
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => ""0b1111""
    rounded_avg(20, 33) => ""0b11010""
    """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","import unittest
class TestRoundedAvg(unittest.TestCase):
    def test_rounded_avg(self):
        self.assertEqual(rounded_avg(1,5), ""0b11"")
        self.assertEqual(rounded_avg(7, 5), -1)
        self.assertEqual(rounded_avg(10, 20), ""0b1111"")
        self.assertEqual(rounded_avg(20, 33), ""0b11010"")
        self.assertEqual(rounded_avg(5, 5), ""0b1"")
        self.assertEqual(rounded_avg(6, 6), ""0b1"")
        self.assertEqual(rounded_avg(7, 7), ""0b1"")
        self.assertEqual(rounded_avg(8, 8), ""0b1"")
        self.assertEqual(rounded_avg(9, 9), ""0b1"")
        self.assertEqual(rounded_avg(10, 10), ""0b1"")
        self.assertEqual(rounded_avg(11, 11), ""0b1"")
        self.assertEqual(rounded_avg(12, 12), ""0b1"")
        self.assertEqual(rounded_avg(13, 13), ""0b1"")
        self.assertEqual(rounded_avg(14, 14), ""0b1"")
        self.assertEqual(rounded_avg(15, 15), ""0b1"")
        self.assertEqual(rounded_avg(16, 16), ""0b1"")
        self.assertEqual(rounded_avg(17, 17), ""0b1"")
        self.assertEqual(rounded_avg(18, 18), ""0b1"")
        self.assertEqual(rounded_avg(19, 19), ""0b1"")
        self.assertEqual(rounded_avg(20, 20), ""0b1"")
        self.assertEqual(rounded_avg(21, 21), ""0b1"")
        self.assertEqual(rounded_avg(22, 22), ""0b1"")
        self.assertEqual(rounded_avg(23, 23), ""0b1"")
        self.assertEqual(rounded_avg(24, 24), ""0b1"")
        self.assertEqual(rounded_avg(25, 25), ""0b1"")
        self.assertEqual(rounded_avg(26, 26), ""0b1"")
        self.assertEqual(rounded_avg(27, 27), ""0b1"")
        self.assertEqual(rounded_avg(28, 28), ""0b1"")
        self.assertEqual(rounded_avg(29, 29), ""0b1"")
        self.assertEqual(rounded_avg(30, 30), ""0b1"")
        self.assertEqual(rounded_avg(31, 31), ""0b1"")
        self.assertEqual(rounded_avg(32, 32), ""0b1"")
        self.assertEqual(rounded_avg(33, 33), ""0b1"")
        self.assertEqual(rounded_avg(34, 34), ""0b1"")
        self.assertEqual(rounded_avg(35, 35), ""0b1"")
        self.assertEqual(rounded_avg(36, 36), ""0b1"")
        self.assertEqual(rounded_avg(37, 37), ""0b1"")
        self.assertEqual(rounded_avg(38, 38), ""0b1"")
        self.assertEqual(rounded_avg(39, 39), ""0b1"")
        self.assertEqual(rounded_avg(40, 40), ""0b1"")"
"
def unique_digits(x):
    """"""Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","import unittest
class TestUniqueDigits(unittest.TestCase):
    def test_unique_digits(self):
        self.assertEqual(unique_digits([15, 33, 1422, 1]), [1, 15, 33])
        self.assertEqual(unique_digits([152, 323, 1422, 10]), [])
        self.assertEqual(unique_digits([15, 33, 1422, 1, 152, 323, 1422, 10]), [1, 15, 33])
        self.assertEqual(unique_digits([15, 33, 1422, 1, 152, 323, 1422, 10, 15, 33]), [1, 15, 33])
        self.assertEqual(unique_digits([15, 33, 1422, 1, 152, 323, 1422, 10, 15, 33, 1]), [1, 15, 33])
        self.assertEqual(unique_digits([15, 33, 1422, 1, 152, 323, 1422, 10, 15, 33, 1, 15]), [1, 15, 33])
        self.assertEqual(unique_digits([15, 33, 1422, 1, 152, 323, 1422, 10, 15, 33, 1, 15, 33]), [])
        self.assertEqual(unique_digits([15, 33, 1422, 1, 152, 323, 1422, 10, 15, 33, 1, 15, 33, 1]), [])
        self.assertEqual(unique_digits([15, 33, 1422, 1, 152, 323, 1422, 10, 15, 33, 1, 15, 33, 1, 1]), [])
        self.assertEqual(unique_digits([15, 33, 1422, 1, 152, 323, 1422, 10, 15, 33, 1, 15, 33, 1, 1, 1]), [])
        self.assertEqual(unique_digits([15, 33, 1422, 1, 152, 323, 1422, 10, 15, 33, 1, 15, 33, 1, 1, 1, 1]), [])
        self.assertEqual(unique_digits([15, 33, 1422, 1, 152, 323, 1422, 10, 15, 33, 1, 15, 33, 1, 1, 1, 1, 1]), [])
        self.assertEqual(unique_digits([15, 33, 1422, 1, 152, 323, 1422, 10, 15, 33, 1, 15, 33, 1, 1, 1, 1, 1, 1]), [])
        self.assertEqual(unique_digits([15, 33, 1422, 1, 152, 323, 1422, 10, 15, 33, 1, 15, 33, 1, 1, 1, 1, 1, 1, 1]), [])"
"
def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","import unittest


class TestByLength(unittest.TestCase):
    def test_by_length(self):
        self.assertEqual(by_length([2, 1, 1, 4, 5, 8, 2, 3]), [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""])
        self.assertEqual(by_length([1, -1, 55]), [""One""])
        self.assertEqual(by_length([]), [])
        self.assertEqual(by_length([2, 1, 1, 4, 5, 8, 2, 3, 9]), [""Nine"", ""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""])
        self.assertEqual(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]), [""Nine"", ""Eight"", ""Seven"", ""Six"", ""Five"", ""Four"", ""Three"", ""Two"", ""One""])
        self.assertEqual(by_length([10, 20, 30, 40, 50, 60, 70, 80, 90]), [""Ninety"", ""Eighty"", ""Seventy"", ""Sixty"", ""Fifty"", ""Forty"", ""Thirty"", ""Twenty"", ""Ten""])
        self.assertEqual(by_length([100, 200, 300, 400, 500, 600, 700, 800, 900]), [""Nine Hundred"", ""Eight Hundred"", ""Seven Hundred"", ""Six Hundred"", ""Five Hundred"", ""Four Hundred"", ""Three Hundred"", ""Two Hundred"", ""One Hundred""])
        self.assertEqual(by_length([1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000]), [""Nine Thousand"", ""Eight Thousand"", ""Seven Thousand"", ""Six Thousand"", ""Five Thousand"", ""Four Thousand"", ""Three Thousand"", ""Two Thousand"", ""One Thousand""])
        self.assertEqual(by_length([10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000]), [""Ninety Thousand"", ""Eighty Thousand"", ""Seventy Thousand"", ""Sixty Thousand"", ""Fifty Thousand"", ""Forty Thousand"", ""Thirty Thousand"", ""Twenty Thousand"", ""Ten Thousand""])
        self.assertEqual(by_length([100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000]), [""Nine Hundred Thousand"", ""Eight Hundred Thousand"", ""Seven Hundred Thousand"", ""Six Hundred Thousand"", ""Five Hundred Thousand"", ""Four Hundred Thousand"", ""Three Hundred Thousand"", ""Two Hundred Thousand"", ""One Hundred Thousand""])
"
"
def f(n):
    """""" Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","import unittest
class TestFactorials(unittest.TestCase):
    def test_f(self):
        self.assertEqual(f(5), [1, 2, 6, 24, 15])
        self.assertEqual(f(3), [1, 2, 6])
        self.assertEqual(f(7), [1, 2, 6, 24, 15, 120, 720])
        self.assertEqual(f(9), [1, 2, 6, 24, 15, 120, 720, 5040, 40320])
        self.assertEqual(f(11), [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800])
        self.assertEqual(f(13), [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600])
        self.assertEqual(f(15), [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800])
        self.assertEqual(f(17), [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200])
        self.assertEqual(f(19), [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000])
        self.assertEqual(f(21), [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000])
        self.assertEqual(f(23), [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000])
"
"
def even_odd_palindrome(n):
    """"""
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","import unittest

class Test(unittest.TestCase):
    def test_even_odd_palindrome(self):
        self.assertEqual((1, 2), even_odd_palindrome(3))
        self.assertEqual((4, 6), even_odd_palindrome(12))
        self.assertEqual((0, 0), even_odd_palindrome(1))
        self.assertEqual((0, 0), even_odd_palindrome(2))
        self.assertEqual((0, 0), even_odd_palindrome(3))
        self.assertEqual((0, 0), even_odd_palindrome(4))
        self.assertEqual((1, 1), even_odd_palindrome(5))
        self.assertEqual((2, 2), even_odd_palindrome(6))
        self.assertEqual((3, 3), even_odd_palindrome(7))
        self.assertEqual((4, 4), even_odd_palindrome(8))
        self.assertEqual((5, 5), even_odd_palindrome(9))
        self.assertEqual((6, 6), even_odd_palindrome(10))
        self.assertEqual((7, 7), even_odd_palindrome(11))
        self.assertEqual((8, 8), even_odd_palindrome(12))
        self.assertEqual((9, 9), even_odd_palindrome(13))
        self.assertEqual((10, 10), even_odd_palindrome(14))
        self.assertEqual((11, 11), even_odd_palindrome(15))
        self.assertEqual((12, 12), even_odd_palindrome(16))
        self.assertEqual((13, 13), even_odd_palindrome(17))
        self.assertEqual((14, 14), even_odd_palindrome(18))
        self.assertEqual((15, 15), even_odd_palindrome(19))
        self.assertEqual((16, 16), even_odd_palindrome(20))
        self.assertEqual((17, 17), even_odd_palindrome(21))
        self.assertEqual((18, 18), even_odd_palindrome(22))
        self.assertEqual((19, 19), even_odd_palindrome(23))
        self.assertEqual((20, 20), even_odd_palindrome(24))
        self.assertEqual((21, 21), even_odd_palindrome(25))
        self.assertEqual((22, 22), even_odd_palindrome(26))
        self.assertEqual((23, 23), even_odd_palindrome(27))
        self.assertEqual((24, 24), even_odd_palindrome(28))
        self.assertEqual((25, 25), even_odd_palindrome(29))
        self.assertEqual((26, 26), even_odd_palindrome(30))
        self.assertEqual((27, 27), even_odd_palindrome(31))
        self.assertEqual((28, 28), even_odd_palindrome(32))
        self.assertEqual((29, 29), even_odd_palindrome(33))
        self.assertEqual((30, 30), even_odd_palindrome(34))
        self.assertEqual((31, 31), even_odd_palindrome(35))
        self.assertEqual((32, 32), even_odd_palindrome(36))
        self.assertEqual((33, 33), even_odd_palindrome(37))
        self.assertEqual((34, 34), even_odd_palindrome(38))
        self.assertEqual((35, 35), even_odd_palindrome(39))
"
"
def count_nums(arr):
    """"""
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","import unittest
class TestCountNums(unittest.TestCase):
    def test_count_nums(self):
        self.assertEqual(count_nums([-1, 11, -11]), 1)
        self.assertEqual(count_nums([1, 1, 2]), 3)
        self.assertEqual(count_nums([-1, -1, -1]), 0)
        self.assertEqual(count_nums([-1, -1, 1]), 1)
        self.assertEqual(count_nums([-1, 1, 2]), 2)
        self.assertEqual(count_nums([-1, 1, 2, 3]), 3)
        self.assertEqual(count_nums([-1, -1, 1, 2]), 2)
        self.assertEqual(count_nums([-1, -1, 1, 2, 3]), 3)
        self.assertEqual(count_nums([-1, -1, 1, 2, 3, 4]), 4)
        self.assertEqual(count_nums([-1, -1, 1, 2, 3, 4, 5]), 5)
"
"
def move_one_ball(arr):
    """"""We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """"""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","import unittest
class TestMoveOneBall(unittest.TestCase):
    def test_move_one_ball(self):
        self.assertEqual(move_one_ball([3, 4, 5, 1, 2]), True)
        self.assertEqual(move_one_ball([3, 5, 4, 1, 2]), False)
        self.assertEqual(move_one_ball([1, 2, 3, 4, 5]), True)
        self.assertEqual(move_one_ball([1, 2, 3, 5, 4]), False)
        self.assertEqual(move_one_ball([1, 2, 3, 4, 6, 7, 8, 9, 10]), True)
        self.assertEqual(move_one_ball([1, 2, 3, 5, 4, 6, 7, 8, 9, 10]), False)
        self.assertEqual(move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), True)
        self.assertEqual(move_one_ball([1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11]), False)
        self.assertEqual(move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), True)
        self.assertEqual(move_one_ball([1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12]), False)
 "
"
def exchange(lst1, lst2):
    """"""In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return ""YES"".
    Otherwise, return ""NO"".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
    It is assumed that the input lists will be non-empty.
    """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","import unittest
class Test(unittest.TestCase):
    def test_exchange(self):
        self.assertEqual(exchange([1,2,3,4],[1,2,3,4]),""YES"")
        self.assertEqual(exchange([1,2,3,4],[1,5,3,4]),""NO"")
        self.assertEqual(exchange([1,2,3,4],[1,2,3,4,5]),""YES"")
        self.assertEqual(exchange([1,2,3,4],[1,5,3,4,6]),""NO"")
        self.assertEqual(exchange([1,2,3,4],[1,2,3,4,5,6]),""YES"")
        self.assertEqual(exchange([1,2,3,4],[1,5,3,4,6,7]),""NO"")
        self.assertEqual(exchange([1,2,3,4],[1,2,3,4,5,6,7]),""YES"")
        self.assertEqual(exchange([1,2,3,4],[1,5,3,4,6,7,8]),""NO"")
        self.assertEqual(exchange([1,2,3,4],[1,2,3,4,5,6,7,8]),""YES"")
        self.assertEqual(exchange([1,2,3,4],[1,5,3,4,6,7,8,9]),""NO"")
        self.assertEqual(exchange([1,2,3,4],[1,2,3,4,5,6,7,8,9]),""YES"")
 "
"
def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","import unittest
class TestHistogram(unittest.TestCase):
    def test_histogram(self):
        self.assertEqual(histogram('a b c'), {'a': 1, 'b': 1, 'c': 1})
        self.assertEqual(histogram('a b b a'), {'a': 2, 'b': 2})
        self.assertEqual(histogram('a b c a b'), {'a': 2, 'b': 2})
        self.assertEqual(histogram('b b b b a'), {'b': 4})
        self.assertEqual(histogram(''), {})
        self.assertEqual(histogram('a b c d e f g h i j k l m n o p q r s t u v w x y z'), {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1, 'm': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1})
        self.assertEqual(histogram('a b c d e f g h i j k l m n o p q r s t u v w x y z a'), {'a': 2, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1, 'm': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1})
        self.assertEqual(histogram('a b c d e f g h i j k l m n o p q r s t u v w x y z a b'), {'a': 2, 'b': 2, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1, 'm': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1})
        self.assertEqual(histogram('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c'), {'a': 3, 'b': 2, 'c': 3, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1, 'm': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1})"
"
def reverse_delete(s,c):
    """"""Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = ""abcde"", c = ""ae"", the result should be ('bcd',False)
    For s = ""abcdef"", c = ""b""  the result should be ('acdef',False)
    For s = ""abcdedcba"", c = ""ab"", the result should be ('cdedc',True)
    """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","import unittest
class Test(unittest.TestCase):
    def test_reverse_delete(self):
        self.assertEqual(reverse_delete('abcde','ae'),('bcd',False))
        self.assertEqual(reverse_delete('abcdef','b'),('acdef',False))
        self.assertEqual(reverse_delete('abcdedcba','ab'),('cdedc',True))
        self.assertEqual(reverse_delete('abcde','ae'),('bcd',False))
        self.assertEqual(reverse_delete('abcdef','b'),('acdef',False))
        self.assertEqual(reverse_delete('abcdedcba','ab'),('cdedc',True))
        self.assertEqual(reverse_delete('abcde','ae'),('bcd',False))
        self.assertEqual(reverse_delete('abcdef','b'),('acdef',False))
        self.assertEqual(reverse_delete('abcdedcba','ab'),('cdedc',True))
        self.assertEqual(reverse_delete('abcde','ae'),('bcd',False))
        self.assertEqual(reverse_delete('abcdef','b'),('acdef',False))
        self.assertEqual(reverse_delete('abcdedcba','ab'),('cdedc',True))
"
"
def odd_count(lst):
    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","import unittest
class TestOddCount(unittest.TestCase):
    def test_odd_count(self):
        self.assertEqual(odd_count(['1234567']), [""the number of odd elements 4n the str4ng 4 of the 4nput.""])
        self.assertEqual(odd_count(['3',""11111111""]), [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""])
        self.assertEqual(odd_count(['3',""11111111"",'2']), [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput."", ""the number of odd elements 0n the str0ng 0 of the 0nput.""])
        self.assertEqual(odd_count(['3',""11111111"",'2','4']), [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput."", ""the number of odd elements 0n the str0ng 0 of the 0nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""])
        self.assertEqual(odd_count(['3',""11111111"",'2','4','5']), [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput."", ""the number of odd elements 0n the str0ng 0 of the 0nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput.""])
        self.assertEqual(odd_count(['3',""11111111"",'2','4','5','6']), [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput."", ""the number of odd elements 0n the str0ng 0 of the 0nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 4n the str4ng 4 of the 4nput.""])
        self.assertEqual(odd_count(['3',""11111111"",'2','4','5','6','7']), [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput."", ""the number of odd elements 0n the str0ng 0 of the 0nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 4n the str4ng 4 of the 4nput."", ""the number of odd elements 5n the str5ng 5 of the 5nput.""])
"
"
def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","import unittest

class Test(unittest.TestCase):
    def test_minSubArraySum(self):
        self.assertEqual(minSubArraySum([2, 3, 4, 1, 2, 4]), 1)
        self.assertEqual(minSubArraySum([-1, -2, -3]), -6)
        self.assertEqual(minSubArraySum([0]), 0)
        self.assertEqual(minSubArraySum([1]), 1)
        self.assertEqual(minSubArraySum([-1]), -1)
        self.assertEqual(minSubArraySum([-2, -3]), -5)
        self.assertEqual(minSubArraySum([-1, 0]), -1)
        self.assertEqual(minSubArraySum([-1, 1]), 0)
        self.assertEqual(minSubArraySum([-1, 2]), 1)
        self.assertEqual(minSubArraySum([-1, 3]), 2)
        self.assertEqual(minSubArraySum([-1, -2]), -2)
        self.assertEqual(minSubArraySum([-1, -2, -3]), -5)
        self.assertEqual(minSubArraySum([-1, -2, 0]), -2)
        self.assertEqual(minSubArraySum([-1, -2, 1]), 0)
        self.assertEqual(minSubArraySum([-1, -2, 2]), 1)
        self.assertEqual(minSubArraySum([-1, -2, 3]), 2)
        self.assertEqual(minSubArraySum([-1, -2, -3]), -5)
        self.assertEqual(minSubArraySum([-1, -2, 0]), -2)
        self.assertEqual(minSubArraySum([-1, -2, 1]), 0)
        self.assertEqual(minSubArraySum([-1, -2, 2]), 1)
        self.assertEqual(minSubArraySum([-1, -2, 3]), 2)
        self.assertEqual(minSubArraySum([-1, -2, -3]), -5)
        self.assertEqual(minSubArraySum([-1, -2, 0]), -2)
        self.assertEqual(minSubArraySum([-1, -2, 1]), 0)
        self.assertEqual(minSubArraySum([-1, -2, 2]), 1)
        self.assertEqual(minSubArraySum([-1, -2, 3]), 2)
        self.assertEqual(minSubArraySum([-1, -2, -3]), -5)
        self.assertEqual(minSubArraySum([-1, -2, 0]), -2)
        self.assertEqual(minSubArraySum([-1, -2, 1]), 0)
        self.assertEqual(minSubArraySum([-1, -2, 2]), 1)
        self.assertEqual(minSubArraySum([-1, -2, 3]), 2)
        self.assertEqual(minSubArraySum([-1, -2, -3]), -5)
        self.assertEqual(minSubArraySum([-1, -2, 0]), -2)
        self.assertEqual(minSubArraySum([-1, -2, 1]), 0)
        self.assertEqual(minSubArraySum([-1, -2, 2]), 1)
        self.assertEqual(minSubArraySum([-1, -2, 3]), 2)
        self.assertEqual(minSubArraySum([-1, -2, -3]), -5)
        self.assertEqual(minSubArraySum([-1, -2, 0]), -2)
        self.assertEqual(minSubArraySum([-1, -2, 1]), 0)
        self.assertEqual(minSubArraySum([-1, -2, 2]), 1)
        self.assertEqual(minSubArraySum([-1, -2, 3]), 2)
        self.assertEqual(minSubArraySum([-1, -2, -3]), -5)
"
"
def max_fill(grid, capacity):
    import math
    """"""
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """"""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","import unittest
class TestSolutionMethods(unittest.TestCase):
    def setUp(self):
        self.sol = Solution()

    def test_max_fill_example_1(self):
        grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]
        capacity = 1
        self.assertEqual(6, self.sol.max_fill(grid, capacity))

    def test_max_fill_example_2(self):
        grid = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]
        capacity = 2
        self.assertEqual(5, self.sol.max_fill(grid, capacity))

    def test_max_fill_example_3(self):
        Grid = [[0, 0, 0], [0, 0, 0]]
        capacity = 5
        self.assertEqual(0, self.sol.max_fill(grid, capacity))

    def test_max_fill_example_4(self):
        grid = [[1, 1, 1], [1, 1, 1]]
        capacity = 2
        self.assertEqual(3, self.sol.max_fill(grid, capacity))

    def test_max_fill_example_5(self):
        grid = [[0, 0, 0], [0, 0, 1]]
        capacity = 2
        self.assertEqual(3, self.sol.max_fill(grid, capacity))

    def test_max_fill_example_6(self):
        grid = [[0, 0, 0], [0, 0, 1]]
        capacity = 2
        self.assertEqual(3, self.sol.max_fill(grid, capacity))

    def test_max_fill_example_7(self):
        grid = [[0, 0, 0], [0, 0, 1]]
        capacity = 2
        self.assertEqual(3, self.sol.max_fill(grid, capacity))

    def test_max_fill_example_8(self):
        grid = [[0, 0, 0], [0, 0, 1]]
        capacity = 2
        self.assertEqual(3, self.sol.max_fill(grid, capacity))

    def test_max_fill_example_9(self):
        grid = [[0, 0, 0], [0, 0, 1]]
        capacity = 2
        self.assertEqual(3, self.sol.max_fill(grid, capacity))

    def test_max_fill_example_10(self):
        grid = [[0, 0, 0], [0, 0, 1]]
        capacity = 2
        self.assertEqual(3, self.sol.max_fill(grid, capacity))

    def test_max_fill_example_11(self):
        grid = [[0, 0, 0], [0, 0, 1]]
        capacity = 2
        self.assertEqual(3, self.sol.max_fill(grid, capacity))

    def test_max_fill_example_12(self):
        grid = [[0, 0, 0], [0, 0, 1]]
        capacity = 2
        self.assertEqual(3, self.sol.max_fill(grid, capacity))

    def test_max_fill_example_13(self):
        grid = [[0, 0, 0], [0, 0, 1]]
        capacity = 2
        self.assertEqual(3, self.sol.max_fill(grid, capacity))

    def test_max_fill_example_14(self):
        grid = [[0, 0, 0], [0, 0, 1]]
        capacity = 2
        self.assertEqual(3, self.sol.max_fill(grid, capacity))"
"
def sort_array(arr):
    """"""
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","import unittest


class TestSortArray(unittest.TestCase):
    def test_sort_array(self):
        self.assertEqual([1, 2, 3, 4, 5], sort_array([1, 5, 2, 3, 4]))
        self.assertEqual([-6, -5, -4, -3, -2], sort_array([-2, -3, -4, -5, -6]))
        self.assertEqual([0, 1, 2, 3, 4], sort_array([1, 0, 2, 3, 4]))
        self.assertEqual([1, 2, 3, 4, 5], sort_array([1, 5, 2, 3, 4]))
        self.assertEqual([-6, -5, -4, -3, -2], sort_array([-2, -3, -4, -5, -6]))
        self.assertEqual([0, 1, 2, 3, 4], sort_array([1, 0, 2, 3, 4]))
        self.assertEqual([1, 2, 3, 4, 5], sort_array([1, 5, 2, 3, 4]))
        self.assertEqual([-6, -5, -4, -3, -2], sort_array([-2, -3, -4, -5, -6]))
        self.assertEqual([0, 1, 2, 3, 4], sort_array([1, 0, 2, 3, 4]))
        self.assertEqual([1, 2, 3, 4, 5], sort_array([1, 5, 2, 3, 4]))
        self.assertEqual([-6, -5, -4, -3, -2], sort_array([-2, -3, -4, -5, -6]))
        self.assertEqual([0, 1, 2, 3, 4], sort_array([1, 0, 2, 3, 4]))"
"
def select_words(s, n):
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","import unittest
class TestSelectWords(unittest.TestCase):
    def test_select_words(self):
        self.assertEqual(select_words(""Mary had a little lamb"", 4), [""little""])
        self.assertEqual(select_words(""Mary had a little lamb"", 3), [""Mary"", ""lamb""])
        self.assertEqual(select_words(""simple white space"", 2), [])
        self.assertEqual(select_words(""Hello world"", 4), [""world""])
        self.assertEqual(select_words(""Uncle sam"", 3), [""Uncle""])
"
"
def get_closest_vowel(word):
    """"""You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel(""yogurt"") ==> ""u""
    get_closest_vowel(""FULL"") ==> ""U""
    get_closest_vowel(""quick"") ==> """"
    get_closest_vowel(""ab"") ==> """"
    """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","import unittest

class Test(unittest.TestCase):
    def test_get_closest_vowel(self):
        self.assertEqual(get_closest_vowel(""yogurt""), ""u"")
        self.assertEqual(get_closest_vowel(""FULL""), ""U"")
        self.assertEqual(get_closest_vowel(""quick""), """")
        self.assertEqual(get_closest_vowel(""ab""), """")
        self.assertEqual(get_closest_vowel(""a""), """")
        self.assertEqual(get_closest_vowel(""A""), """")
        self.assertEqual(get_closest_vowel(""e""), """")
        self.assertEqual(get_closest_vowel(""E""), """")
        self.assertEqual(get_closest_vowel(""i""), """")
        self.assertEqual(get_closest_vowel(""I""), """")
        self.assertEqual(get_closest_vowel(""o""), """")
        self.assertEqual(get_closest_vowel(""O""), """")
        self.assertEqual(get_closest_vowel(""u""), """")
        self.assertEqual(get_closest_vowel(""U""), """")
"
"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","import unittest


class TestMatchParens(unittest.TestCase):
    def test_match_parens(self):
        self.assertEqual('Yes', match_parens(['()(', ')']))
        self.assertEqual('No', match_parens([')', ')']))
        self.assertEqual('Yes', match_parens(['(()))', '((()))']))
        self.assertEqual('No', match_parens(['(()))', '((())'])
        self.assertEqual('Yes', match_parens(['()(', ')'])
        self.assertEqual('No', match_parens([')', ')'])
        self.assertEqual('Yes', match_parens(['(()))', '((()))'])
        self.assertEqual('No', match_parens(['(()))', '((())'])
        self.assertEqual('Yes', match_parens(['()(', ')'])
        self.assertEqual('No', match_parens([')', ')'])
        self.assertEqual('Yes', match_parens(['(()))', '((()))'])
        self.assertEqual('No', match_parens(['(()))', '((())'])
        self.assertEqual('Yes', match_parens(['()(', ')'])
        self.assertEqual('No', match_parens([')', ')'])
        self.assertEqual('Yes', match_parens(['(()))', '((()))'])
        self.assertEqual('No', match_parens(['(()))', '((())'])
        self.assertEqual('Yes', match_parens(['()(', ')'])
        self.assertEqual('No', match_parens([')', ')'])
        self.assertEqual('Yes', match_parens(['(()))', '((()))'])
        self.assertEqual('No', match_parens(['(()))', '((())'])
        self.assertEqual('Yes', match_parens(['()(', ')'])
        self.assertEqual('No', match_parens([')', ')'])
        self.assertEqual('Yes', match_parens(['(()))', '((()))'])
        self.assertEqual('No', match_parens(['(()))', '((())'])
        self.assertEqual('Yes', match_parens(['()(', ')'])
        self.assertEqual('No', match_parens([')', ')'])
        self.assertEqual('Yes', match_parens(['(()))', '((()))'])
        self.assertEqual('No', match_parens(['(()))', '((())'])
        self.assertEqual('Yes', match_parens(['()(', ')'])
        self.assertEqual('No', match_parens([')', ')'])
        self.assertEqual('Yes', match_parens(['(()))', '((()))'])
        self.assertEqual('No', match_parens(['(()))', '((())'])
        self.assertEqual('Yes', match_parens(['()(', ')'])
        self.assertEqual('No', match_parens([')', ')'])
        self.assertEqual('Yes', match_parens(['(()))', '((()))'])
        self.assertEqual('No', match_parens(['(()))', '((())'])
        self.assertEqual('Yes', match_parens(['()(', ')'])
        self.assertEqual('No', match_parens([')', ')'])
        self.assertEqual('Yes', match_parens(['(()))', '((()))'])
        self.assertEqual('No', match_parens(['(()))', '((())'])
        self.assertEqual('Yes', match_parens(['()(', ')'])
        self.assertEqual('No', match_parens([')', ')'])
        self.assertEqual('Yes', match_parens(['(()))', '((()))'])
        self.assertEqual('No', match_parens(['(()))', '((())'])
        self.assertEqual('Yes', match_parens(['()(', ')'])
        self.assertEqual('No', match_parens([')', ')'])
        self.assertEqual('Yes', match_parens(['(()))', '((()))'])
        self.assertEqual('No', match_parens(['(()))', '((())'])
        self.assertEqual('Yes', match_parens(['()(', ')'])
        self.assertEqual('No', match_parens([')', ')'])
        self.assertEqual('Yes', match_parens(['(()))', '((()))'])"
"
def maximum(arr, k):
    """"""
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","import unittest


class TestMaximum(unittest.TestCase):
    def test_maximum(self):
        arr = [-3, -4, 5]
        k = 3
        self.assertEqual([-4, -3, 5], maximum([-3, -4, 5], 3))

        self.assertEqual([4, 4], maximum([4, -4, 4], 2))
        self.assertEqual([2], maximum([-3, 2, 1, 2, -1, -2, 1], 1))
        self.assertEqual([-3, 2, 2, 1], maximum([-3, 2, 1, 2, -1, -2, 1], 4))
        self.assertEqual( [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], maximum([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 10))
        self.assertEqual([-4], maximum([-3, -4, 5], 1))
        self.assertEqual([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], self.sol.maximum([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 100))
        self.assertEqual([-4, -3], maximum([-3, -4, 5], 2))
        self.assertEqual([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], self.sol.maximum([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 1000))
        self.assertEqual([-3, -4, 5], maximum([-3, -4, 5], 1000))
        self.assertEqual([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], self.sol.maximum([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 1000))"
"
def solution(lst):
    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","import unittest
class TestSolution(unittest.TestCase):
    def test_solution(self):
        self.assertEqual(solution([5, 8, 7, 1]), 12)
        self.assertEqual(solution([3, 3, 3, 3, 3]), 9)
        self.assertEqual(solution([30, 13, 24, 321]), 0)
        self.assertEqual(solution([5, 8, 7, 1, 3, 6, 9, 11, 13, 15, 17, 19, 21, 23, 25]), 40)
        self.assertEqual(solution([5, 8, 7, 1, 3, 6, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]), 40)
        self.assertEqual(solution([5, 8, 7, 1, 3, 6, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]), 40)
        self.assertEqual(solution([5, 8, 7, 1, 3, 6, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]), 40)
        self.assertEqual(solution([5, 8, 7, 1, 3, 6, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]), 40)
        self.assertEqual(solution([5, 8, 7, 1, 3, 6, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35]), 40)
        self.assertEqual(solution([5, 8, 7, 1, 3, 6, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]), 40)
        self.assertEqual(solution([5, 8, 7, 1, 3, 6, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]), 40)
        self.assertEqual(solution([5, 8, 7, 1, 3, 6, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41]), 40)
        self.assertEqual(solution([5, 8, 7, 1, 3, 6, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43]), 40)
"
"
def add_elements(arr, k):
    """"""
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","import unittest
from add_elements import add_elements


class TestAddElements(unittest.TestCase):
    def test_add_elements(self):
        self.assertEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24)
        self.assertEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 5), 33)
        self.assertEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 6), 42)
        self.assertEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 7), 51)
        self.assertEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 8), 60)
        self.assertEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 9), 69)
        self.assertEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 10), 78)
        self.assertEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 11), 87)
        self.assertEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 12), 96)
        self.assertEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 13), 105)
"
"
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","import unittest
class TestGetOddCollatz(unittest.TestCase):
    def test_get_odd_collatz(self):
        self.assertEqual(get_odd_collatz(5), [1, 5])
        self.assertEqual(get_odd_collatz(6), [1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049])
        self.assertEqual(get_odd_collatz(7), [1, 7])
        self.assertEqual(get_odd_collatz(8), [1, 4, 2, 1])
        self.assertEqual(get_odd_collatz(9), [1, 9])
        self.assertEqual(get_odd_collatz(10), [1, 5, 16, 8, 4, 2, 1])
        self.assertEqual(get_odd_collatz(11), [1, 11])
        self.assertEqual(get_odd_collatz(12), [1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049])
        self.assertEqual(get_odd_collatz(13), [1, 13])
        self.assertEqual(get_odd_collatz(14), [1, 7, 22, 44, 88, 176, 352, 704, 1408, 2816, 5632, 11264, 22528, 45056, 90112, 180224])
        self.assertEqual(get_odd_collatz(15), [1, 15])
        self.assertEqual(get_odd_collatz(16), [1, 8, 4, 2, 1])
        self.assertEqual(get_odd_collatz(17), [1, 17])
        self.assertEqual(get_odd_collatz(18), [1, 9, 36, 108, 324, 960, 2880, 8448, 25536, 76480, 226864, 681760, 1944064, 5806080, 17625376, 48656000, 147363200])
        self.assertEqual(get_odd_collatz(19), [1, 19])
        self.assertEqual(get_odd_collatz(20), [1, 10, 5, 16, 8, 4, 2, 1])
        self.assertEqual(get_odd_collatz(21), [1, 21])
        self.assertEqual(get_odd_collatz(22), [1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049])
        self.assertEqual(get_odd_collatz(23), [1, 23])
        self.assertEqual(get_odd_collatz(24), [1, 12, 6, 3, 1])
        self.assertEqual(get_odd_collatz(25), [1, 25])
        self.assertEqual(get_odd_collatz(26), [1, 13, 40, 160, 640, 2560, 10240, 40960, 163840])
        self.assertEqual(get_odd_collatz(27), [1, 27])
"
"
def valid_date(date):
    """"""You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """"""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","import unittest
class Test(unittest.TestCase):
    def test_valid_date(self):
        self.assertTrue(valid_date('03-11-2000'))
        self.assertFalse(valid_date('15-01-2012'))
        self.assertFalse(valid_date('04-0-2040'))
        self.assertTrue(valid_date('06-04-2020'))
        self.assertFalse(valid_date('06/04/2020'))
"
"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","import unittest
class TestSplitWords(unittest.TestCase):
    def test_split_words(self):
        self.assertEqual(split_words(""Hello world!""), [""Hello"", ""world!""])
        self.assertEqual(split_words(""Hello,world!""), [""Hello"", ""world!""])
        self.assertEqual(split_words(""abcdef""), 3)
        self.assertEqual(split_words(""a b c d e f g h i j k l m n o p q r s t u v w x y z""), 26)
        self.assertEqual(split_words(""A B C D E F G H I J K L M N O P Q R S T U V W X Y Z""), 26)
        self.assertEqual(split_words(""a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z""), 52)
        self.assertEqual(split_words(""a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z""), 52)
        self.assertEqual(split_words(""a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z""), 26)
        self.assertEqual(split_words(""a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z""), 52)
        self.assertEqual(split_words(""a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z a b c d e f g h i j k l m n o p q r s t u v w x y z""), 52)
        self.assertEqual(split_words(""a b c d e f g h i j k l m n o p q r s t u v w x y z a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z""), 52)
        self.assertEqual(split_words(""a b c d e f g h i j k l m n o p q r s t u v w x y z a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z a b c d e f g h i j k l m n o p q r s t u v w x y z""), 104)
        self.assertEqual(split_words(""a b c d e f g h i j k l m n o p q r s t u v w x y z a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z a b c d e f g h i j k l m n o p q r s t u v w x y z""), 104)"
"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","import unittest
class TestIsSorted(unittest.TestCase):
    def test_is_sorted(self):
        self.assertTrue(is_sorted([5]))
        self.assertTrue(is_sorted([1, 2, 3, 4, 5]))
        self.assertFalse(is_sorted([1, 3, 2, 4, 5]))
        self.assertTrue(is_sorted([1, 2, 3, 4, 5, 6]))
        self.assertTrue(is_sorted([1, 2, 3, 4, 5, 6, 7]))
        self.assertFalse(is_sorted([1, 3, 2, 4, 5, 6, 7]))
        self.assertTrue(is_sorted([1, 2, 2, 3, 3, 4]))
        self.assertFalse(is_sorted([1, 2, 2, 2, 3, 4]))
        self.assertTrue(is_sorted([5, 6, 7, 8, 9, 10]))
        self.assertFalse(is_sorted([5, 6, 7, 8, 9, 10, 11]))
 "
"
def intersection(interval1, interval2):
    """"""You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return ""YES"",
    otherwise, return ""NO"".
    If the two intervals don't intersect, return ""NO"".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> ""NO""
    intersection((-1, 1), (0, 4)) ==> ""NO""
    intersection((-3, -1), (-5, 5)) ==> ""YES""
    """"""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","import unittest

class TestSolution(unittest.TestCase):
    def test_solution(self):
        self.assertEqual(intersection((1, 2), (2, 3)), ""NO"")
        self.assertEqual(intersection((-1, 1), (0, 4)), ""NO"")
        self.assertEqual(intersection((-3, -1), (-5, 5)), ""YES"")
        self.assertEqual(intersection((2, 6), (3, 8)), ""YES"")
        self.assertEqual(intersection((0, 4), (1, 7)), ""NO"")
        self.assertEqual(intersection((-1, 5), (-2, 6)), ""YES"")
        self.assertEqual(intersection((-3, -1), (-5, 5)), ""YES"")
        self.assertEqual(intersection((0, 4), (1, 7)), ""NO"")
        self.assertEqual(intersection((-1, 5), (-2, 6)), ""YES"")
        self.assertEqual(intersection((-3, -1), (-5, 5)), ""YES"")
        self.assertEqual(intersection((0, 4), (1, 7)), ""NO"")
        self.assertEqual(intersection((-1, 5), (-2, 6)), ""YES"")
        self.assertEqual(intersection((-3, -1), (-5, 5)), ""YES"")
        self.assertEqual(intersection((0, 4), (1, 7)), ""NO"")
        self.assertEqual(intersection((-1, 5), (-2, 6)), ""YES"")
        self.assertEqual(intersection((-3, -1), (-5, 5)), ""YES"")
        self.assertEqual(intersection((0, 4), (1, 7)), ""NO"")
        self.assertEqual(intersection((-1, 5), (-2, 6)), ""YES"")
        self.assertEqual(intersection((-3, -1), (-5, 5)), ""YES"")
        self.assertEqual(intersection((0, 4), (1, 7)), ""NO"")
        self.assertEqual(intersection((-1, 5), (-2, 6)), ""YES"")
        self.assertEqual(intersection((-3, -1), (-5, 5)), ""YES"")
        self.assertEqual(intersection((0, 4), (1, 7)), ""NO"")
        self.assertEqual(intersection((-1, 5), (-2, 6)), ""YES"")
        self.assertEqual(intersection((-3, -1), (-5, 5)), ""YES"")
        self.assertEqual(intersection((0, 4), (1, 7)), ""NO"")
        self.assertEqual(intersection((-1, 5), (-2, 6)), ""YES"")
        self.assertEqual(intersection((-3, -1), (-5, 5)), ""YES"")
        self.assertEqual(intersection((0, 4), (1, 7)), ""NO"")
        self.assertEqual(intersection((-1, 5), (-2, 6)), ""YES"")
        self.assertEqual(intersection((-3, -1), (-5, 5)), ""YES"")
        self.assertEqual(intersection((0, 4), (1, 7)), ""NO"")
        self.assertEqual(intersection((-1, 5), (-2, 6)), ""YES"")
        self.assertEqual(intersection((-3, -1), (-5, 5)), ""YES"")
        self.assertEqual(intersection((0, 4), (1, 7)), ""NO"")
        self.assertEqual(intersection((-1, 5), (-2, 6)), ""YES"")
        self.assertEqual(intersection((-3, -1), (-5, 5)), ""YES"")
        self.assertEqual(intersection((0, 4), (1, 7)), ""NO"")
        self.assertEqual(intersection((-1, 5), (-2, 6)), ""YES"")
        self.assertEqual(intersection((-3, -1), (-5, 5)), ""YES"")
"
"
def prod_signs(arr):
    """"""
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","import unittest


class TestProdSigns(unittest.TestCase):
    def test_prod_signs(self):
        self.assertEqual(prod_signs([1, 2, 2, -4]), -9)
        self.assertEqual(prod_signs([0, 1]), 0)
        self.assertIsNone(prod_signs([]))


"
"
def minPath(grid, k):
    """"""
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","class TestSolution(unittest.TestCase):
    def test_minPath(self):
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 3), [1, 2, 1])
        self.assertEqual(minPath([[5,9,3], [4,1,6], [7,8,2]], 1), [1])
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 2), [1, 2])
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 4), [1, 2, 1, 2])
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 5), [1, 2, 1, 2, 1])
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 6), [1, 2, 1, 2, 1, 2])
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 7), [1, 2, 1, 2, 1, 2, 1])
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 8), [1, 2, 1, 2, 1, 2, 1, 2])
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 9), [1, 2, 1, 2, 1, 2, 1, 2, 1])
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 10), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 11), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 12), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 13), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 14), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 15), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])
        self.assertEqual(minPath([[1,2,3], [4,5,6], [7,8,9]], 16), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])"
"
def tri(n):
    """"""Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","import unittest

class TestTri(unittest.TestCase):
    def test_tri(self):
        self.assertEqual(tri(3), [1, 3, 2, 8])
        self.assertEqual(tri(4), [1, 3, 2, 8, 9])
        self.assertEqual(tri(5), [1, 3, 2, 8, 9, 17])
        self.assertEqual(tri(6), [1, 3, 2, 8, 9, 17, 24])
        self.assertEqual(tri(7), [1, 3, 2, 8, 9, 17, 24, 50])
        self.assertEqual(tri(8), [1, 3, 2, 8, 9, 17, 24, 50, 123])
        self.assertEqual(tri(9), [1, 3, 2, 8, 9, 17, 24, 50, 123, 265])
        self.assertEqual(tri(10), [1, 3, 2, 8, 9, 17, 24, 50, 123, 265, 518])
        self.assertEqual(tri(11), [1, 3, 2, 8, 9, 17, 24, 50, 123, 265, 518, 1089])
        self.assertEqual(tri(12), [1, 3, 2, 8, 9, 17, 24, 50, 123, 265, 518, 1089, 2639])
        self.assertEqual(tri(13), [1, 3, 2, 8, 9, 17, 24, 50, 123, 265, 518, 1089, 2639, 6079])
        self.assertEqual(tri(14), [1, 3, 2, 8, 9, 17, 24, 50, 123, 265, 518, 1089, 2639, 6079, 16833])
        self.assertEqual(tri(15), [1, 3, 2, 8, 9, 17, 24, 50, 123, 265, 518, 1089, 2639, 6079, 16833, 48828])
        self.assertEqual(tri(16), [1, 3, 2, 8, 9, 17, 24, 50, 123, 265, 518, 1089, 2639, 6079, 16833, 48828, 141511])
        self.assertEqual(tri(17), [1, 3, 2, 8, 9, 17, 24, 50, 123, 265, 518, 1089, 2639, 6079, 16833, 48828, 141511, 466008])
        self.assertEqual(tri(18), [1, 3, 2, 8, 9, 17, 24, 50, 123, 265, 518, 1089, 2639, 6079, 16833, 48828, 141511, 466008, 1353018])
"
"
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","import unittest
class TestDigits(unittest.TestCase):
    def test_digits(self):
        self.assertEqual(digits(1), 1)
        self.assertEqual(digits(4), 0)
        self.assertEqual(digits(235), 15)
        self.assertEqual(digits(123456789), 0)
        self.assertEqual(digits(123456789123456789), 0)
        self.assertEqual(digits(123456789123456789123456789), 0)
        self.assertEqual(digits(123456789123456789123456789123456789), 0)
        self.assertEqual(digits(123456789123456789123456789123456789123456789), 0)
        self.assertEqual(digits(123456789123456789123456789123456789123456789123456789), 0)
        self.assertEqual(digits(123456789123456789123456789123456789123456789123456789123456789), 0)
        self.assertEqual(digits(123456789123456789123456789123456789123456789123456789123456789123456789), 0)
        self.assertEqual(digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789), 0)
        self.assertEqual(digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789), 0)
        self.assertEqual(digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789), 0)
        self.assertEqual(digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789), 0)
"
"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","import unittest
class Test(unittest.TestCase):
    def test_case_00(self):
        self.assertEqual(is_nested('[[]]'), True)
    
    def test_case_01(self):
        self.assertEqual(is_nested('[]]]]]]][[[[[]'), False)
    
    def test_case_02(self):
        self.assertEqual(is_nested('[][]'), False)
    
    def test_case_03(self):
        self.assertEqual(is_nested('[]'), False)
    
    def test_case_04(self):
        self.assertEqual(is_nested('[[][]]'), True)
    
    def test_case_05(self):
        self.assertEqual(is_nested('[[]][['), True)
    "
"

def sum_squares(lst):
    """"""You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","import unittest
class TestSumSquares(unittest.TestCase):
    def test_sum_squares(self):
        self.assertEqual(sum_squares([1,2,3]), 14)
        self.assertEqual(sum_squares([1,4,9]), 98)
        self.assertEqual(sum_squares([1,3,5,7]), 84)
        self.assertEqual(sum_squares([1.4,4.2,0]), 29)
        self.assertEqual(sum_squares([-2.4,1,1]), 6)
        "
"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") ➞ False
    check_if_last_char_is_a_letter(""apple pi e"") ➞ True
    check_if_last_char_is_a_letter(""apple pi e "") ➞ False
    check_if_last_char_is_a_letter("""") ➞ False 
    '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","import unittest
class TestSolution(unittest.TestCase):
    def test_case_0(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pie""), False)
    
    def test_case_1(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pi e""), True)
    
    def test_case_2(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pi e ""), False)
    
    def test_case_3(self):
        self.assertEqual(check_if_last_char_is_a_letter(""""), False)
    
    def test_case_4(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pie""), False)
    
    def test_case_5(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pi e""), True)
    
    def test_case_6(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pi e ""), False)
    
    def test_case_7(self):
        self.assertEqual(check_if_last_char_is_a_letter(""""), False)
    
    def test_case_8(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pie""), False)
    
    def test_case_9(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pi e""), True)
    
    def test_case_10(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pi e ""), False)
    
    def test_case_11(self):
        self.assertEqual(check_if_last_char_is_a_letter(""""), False)
    
    def test_case_12(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pie""), False)
    
    def test_case_13(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pi e""), True)
    
    def test_case_14(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pi e ""), False)
    
    def test_case_15(self):
        self.assertEqual(check_if_last_char_is_a_letter(""""), False)
    
    def test_case_16(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pie""), False)
    
    def test_case_17(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pi e""), True)
    
    def test_case_18(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pi e ""), False)
    
    def test_case_19(self):
        self.assertEqual(check_if_last_char_is_a_letter(""""), False)
    
    def test_case_20(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pie""), False)
    
    def test_case_21(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pi e""), True)
    
    def test_case_22(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pi e ""), False)
    
    def test_case_23(self):
        self.assertEqual(check_if_last_char_is_a_letter(""""), False)
    
    def test_case_24(self):
        self.assertEqual(check_if_last_char_is_a_letter(""apple pie""), False)
    "
"
def can_arrange(arr):
    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","import unittest
class Test(unittest.TestCase):
    def test_can_arrange(self):
        self.assertEqual(can_arrange([1,2,4,3,5]), 3)
        self.assertEqual(can_arrange([1,2,3]), -1)
        self.assertEqual(can_arrange([1,2,3,4,5]), -1)
        self.assertEqual(can_arrange([1,2,3,4,5,6]), 5)
        self.assertEqual(can_arrange([1,2,3,4,5,6,7]), 6)
        self.assertEqual(can_arrange([1,2,3,4,5,6,7,8]), -1)
        self.assertEqual(can_arrange([1,2,3,4,5,6,7,8,9]), 8)
        self.assertEqual(can_arrange([1,2,3,4,5,6,7,8,9,10]), -1)
        self.assertEqual(can_arrange([1,2,3,4,5,6,7,8,9,10,11]), 10)
        self.assertEqual(can_arrange([1,2,3,4,5,6,7,8,9,10,11,12]), -1)
        self.assertEqual(can_arrange([1,2,3,4,5,6,7,8,9,10,11,12,13]), 12)
"
"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","import unittest

class TestLargestSmallestIntegers(unittest.TestCase):
    def test_largest_smallest_integers(self):
        self.assertEqual(largest_smallest_integers([2, 4, 1, 3, 5, 7]), (None, 1))
        self.assertEqual(largest_smallest_integers([]), (None, None))
        self.assertEqual(largest_smallest_integers([0]), (None, None))
"
"
def compare_one(a, b):
    """"""
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, ""2,3"") ➞ ""2,3""
    compare_one(""5,1"", ""6"") ➞ ""6""
    compare_one(""1"", 1) ➞ None
    """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","import unittest
class TestCompareOne(unittest.TestCase):
    def test_compare_one(self):
        self.assertEqual(compare_one(1,2.5), 2.5)
        self.assertEqual(compare_one(1,""2,3""), ""2,3"")
        self.assertEqual(compare_one(""5,1"",""6""), ""6"")
        self.assertEqual(compare_one(""1"",1), None)
        self.assertEqual(compare_one(1, 1), None)
        self.assertEqual(compare_one(2, 1), 2)
        self.assertEqual(compare_one(1, 2), 2)
        self.assertEqual(compare_one(""1"", ""2""), ""2"")
        self.assertEqual(compare_one(""2"", ""1""), ""2"")
        self.assertEqual(compare_one(""1"", ""1""), None)
        self.assertEqual(compare_one(""1,5"", ""1,6""), ""1,6"")
        self.assertEqual(compare_one(""1,6"", ""1,5""), ""1,6"")
        self.assertEqual(compare_one(""1,5"", ""1,5""), None)
        self.assertEqual(compare_one(""1,5"", 1), ""1,5"")
        self.assertEqual(compare_one(1, ""1,5""), ""1,5"")
        self.assertEqual(compare_one(""1,5"", 2), ""2"")
        self.assertEqual(compare_one(2, ""1,5""), ""2"")
        self.assertEqual(compare_one(""1,5"", ""1,6""), ""1,6"")
        self.assertEqual(compare_one(""1,6"", ""1,5""), ""1,6"")
        self.assertEqual(compare_one(""1,5"", ""1,5""), None)
        self.assertEqual(compare_one(""1,5"", 1), ""1,5"")
        self.assertEqual(compare_one(1, ""1,5""), ""1,5"")
        self.assertEqual(compare_one(""1,5"", 2), ""2"")
        self.assertEqual(compare_one(2, ""1,5""), ""2"")
        self.assertEqual(compare_one(""1,5"", ""1,6""), ""1,6"")
        self.assertEqual(compare_one(""1,6"", ""1,5""), ""1,6"")
        self.assertEqual(compare_one(""1,5"", ""1,5""), None)
        self.assertEqual(compare_one(""1,5"", 1), ""1,5"")
        self.assertEqual(compare_one(1, ""1,5""), ""1,5"")
        self.assertEqual(compare_one(""1,5"", 2), ""2"")
        self.assertEqual(compare_one(2, ""1,5""), ""2"")
        self.assertEqual(compare_one(""1,5"", ""1,6""), ""1,6"")
        self.assertEqual(compare_one(""1,6"", ""1,5""), ""1,6"")
        self.assertEqual(compare_one(""1,5"", ""1,5""), None)
        self.assertEqual(compare_one(""1,5"", 1), ""1,5"")
        self.assertEqual(compare_one(1, ""1,5""), ""1,5"")
        self.assertEqual(compare_one(""1,5"", 2), ""2"")
        self.assertEqual(compare_one(2, ""1,5""), ""2"")
        self.assertEqual(compare_one(""1,5"", ""1,6""), ""1,6"")
        self.assertEqual(compare_one(""1,6"", ""1,5""), ""1,6"")
        self.assertEqual(compare_one(""1,5"", ""1,5""), None)
        self.assertEqual(compare_one(""1,5"", 1), ""1,5"")
        self.assertEqual(compare_one(1, ""1,5""), ""1,5"")
        self.assertEqual(compare_one(""1,5"", 2), ""2"")
        self.assertEqual(compare_one(2, ""1,5""), ""2"")
"
"
def is_equal_to_sum_even(n):
    """"""Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """"""
","    return n%2 == 0 and n >= 8
","import unittest
class TestSumEvenNumbers(unittest.TestCase):
    def test_is_equal_to_sum_even(self):
        self.assertFalse(is_equal_to_sum_even(4))
        self.assertFalse(is_equal_to_sum_even(6))
        self.assertTrue(is_equal_to_sum_even(8))
        self.assertTrue(is_equal_to_sum_even(10))
        self.assertTrue(is_equal_to_sum_even(12))
        self.assertFalse(is_equal_to_sum_even(14))
        self.assertFalse(is_equal_to_sum_even(16))
        self.assertTrue(is_equal_to_sum_even(18))
        self.assertTrue(is_equal_to_sum_even(20))
        self.assertTrue(is_equal_to_sum_even(22))
        self.assertFalse(is_equal_to_sum_even(24))
        self.assertFalse(is_equal_to_sum_even(26))
        self.assertTrue(is_equal_to_sum_even(28))
        self.assertTrue(is_equal_to_sum_even(30))
        self.assertTrue(is_equal_to_sum_even(32))
        self.assertFalse(is_equal_to_sum_even(34))
        self.assertFalse(is_equal_to_sum_even(36))
        self.assertTrue(is_equal_to_sum_even(38))
        self.assertTrue(is_equal_to_sum_even(40))
        self.assertTrue(is_equal_to_sum_even(42))
        self.assertFalse(is_equal_to_sum_even(44))
        self.assertFalse(is_equal_to_sum_even(46))
        self.assertTrue(is_equal_to_sum_even(48))
        self.assertTrue(is_equal_to_sum_even(50))
        self.assertTrue(is_equal_to_sum_even(52))
        self.assertFalse(is_equal_to_sum_even(54))
        self.assertFalse(is_equal_to_sum_even(56))
        self.assertTrue(is_equal_to_sum_even(58))
        self.assertTrue(is_equal_to_sum_even(60))
        self.assertTrue(is_equal_to_sum_even(62))
        self.assertFalse(is_equal_to_sum_even(64))
        self.assertFalse(is_equal_to_sum_even(66))
        self.assertTrue(is_equal_to_sum_even(68))
        self.assertTrue(is_equal_to_sum_even(70))
        self.assertTrue(is_equal_to_sum_even(72))
        self.assertFalse(is_equal_to_sum_even(74))
        self.assertFalse(is_equal_to_sum_even(76))
        self.assertTrue(is_equal_to_sum_even(78))
        self.assertTrue(is_equal_to_sum_even(80))
        self.assertTrue(is_equal_to_sum_even(82))
        self.assertFalse(is_equal_to_sum_even(84))
        self.assertFalse(is_equal_to_sum_even(86))
        self.assertTrue(is_equal_to_sum_even(88))
        self.assertTrue(is_equal_to_sum_even(90))
        self.assertTrue(is_equal_to_sum_even(92))
        self.assertFalse(is_equal_to_sum_even(94))
        self.assertFalse(is_equal_to_sum_even(96))
        self.assertTrue(is_equal_to_sum_even(98))
        self.assertTrue(is_equal_to_sum_even(100))
"
"
def special_factorial(n):
    """"""The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","import unittest

class TestSpecialFactorial(unittest.TestCase):
    def test_special_factorial(self):
        self.assertEqual(special_factorial(4), 288)
        self.assertEqual(special_factorial(5), 120)
        self.assertEqual(special_factorial(6), 720)
        self.assertEqual(special_factorial(7), 5040)
        self.assertEqual(special_factorial(8), 40320)
        self.assertEqual(special_factorial(9), 362880)
        self.assertEqual(special_factorial(10), 3628800)
        self.assertEqual(special_factorial(11), 39916800)
        self.assertEqual(special_factorial(12), 479001600)
        self.assertEqual(special_factorial(13), 6227020800)
        self.assertEqual(special_factorial(14), 87178291200)
        self.assertEqual(special_factorial(15), 1307674368000)
"
"
def fix_spaces(text):
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example 1"") == ""Example_1""
    fix_spaces("" Example 2"") == ""_Example_2""
    fix_spaces("" Example   3"") == ""_Example-3""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","import unittest
class Test(unittest.TestCase):
    def test_fix_spaces(self):
        self.assertEqual(fix_spaces(""Example""), ""Example"")
        self.assertEqual(fix_spaces(""Example 1""), ""Example_1"")
        self.assertEqual(fix_spaces("" Example 2""), ""_Example_2"")
        self.assertEqual(fix_spaces("" Example   3""), ""_Example-3"")
        self.assertEqual(fix_spaces(""Example 1 2 3""), ""Example_1_2_3"")
        self.assertEqual(fix_spaces(""Example 1 2 3 4""), ""Example_1_2_3_4"")
        self.assertEqual(fix_spaces(""Example 1 2 3 4 5""), ""Example_1_2_3_4_5"")
        self.assertEqual(fix_spaces(""Example 1 2 3 4 5 6""), ""Example_1_2_3_4_5_6"")
        self.assertEqual(fix_spaces(""Example 1 2 3 4 5 6 7""), ""Example_1_2_3_4_5_6_7"")
        self.assertEqual(fix_spaces(""Example 1 2 3 4 5 6 7 8""), ""Example_1_2_3_4_5_6_7_8"")
"
"
def file_name_check(file_name):
    """"""Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check(""example.txt"") # => 'Yes'
    file_name_check(""1example.dll"") # => 'No' (the name should start with a latin alphapet letter)
    """"""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","import unittest


class Test(unittest.TestCase):
    def test_file_name_check(self):
        self.assertEqual(file_name_check(""example.txt""), 'Yes')
        self.assertEqual(file_name_check(""1example.dll""), 'No')
        self.assertEqual(file_name_check(""example.exe""), 'Yes')
        self.assertEqual(file_name_check(""example.dll""), 'Yes')
        self.assertEqual(file_name_check(""example.txt""), 'Yes')
        self.assertEqual(file_name_check(""1234567890.exe""), 'No')
        self.assertEqual(file_name_check(""1234567890.dll""), 'No')
        self.assertEqual(file_name_check(""1234567890.txt""), 'No')
        self.assertEqual(file_name_check(""example.exe""), 'Yes')
        self.assertEqual(file_name_check(""example.dll""), 'Yes')
        self.assertEqual(file_name_check(""example.txt""), 'Yes')
"
"


def sum_squares(lst):
    """"""""
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","import unittest
class TestSumSquares(unittest.TestCase):
    def test_sum_squares(self):
        self.assertEqual(sum_squares([1,2,3]),6)
        self.assertEqual(sum_squares([]),0)
        self.assertEqual(sum_squares([-1,-5,2,-1,-5]),-126)
        self.assertEqual(sum_squares([1,2,3,4,5,6,7,8,9,10]),3025)
        self.assertEqual(sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]),10825)
        self.assertEqual(sum_squares([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]),-10825)
        self.assertEqual(sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]),3025)
        self.assertEqual(sum_squares([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,21,22,23,24,25]),-10825)
        self.assertEqual(sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]),3025)
        self.assertEqual(sum_squares([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,21,22,23,24,25,26]),-10825)
        self.assertEqual(sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]),3025)
        self.assertEqual(sum_squares([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,21,22,23,24,25,26,27]),-10825)
        self.assertEqual(sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]),3025)
        self.assertEqual(sum_squares([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,21,22,23,24,25,26,27,28]),-10825)
"
"
def words_in_sentence(sentence):
    """"""
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = ""This is a test""
        Output: ""is""

    Example 2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","import unittest


class TestWordsInSentence(unittest.TestCase):
    def test_words_in_sentence(self):
        self.assertEqual(words_in_sentence(""This is a test""), ""is"")
        self.assertEqual(words_in_sentence(""lets go for swimming""), ""go for"")
        self.assertEqual(words_in_sentence(""This is a test sentence""), ""is a test"")
        self.assertEqual(words_in_sentence(""This is a test sentence with 1234567890 numbers""), ""is a test sentence"")
        self.assertEqual(words_in_sentence(""This is a test sentence with 1234567890 numbers and special characters !@#$%^&*()_+-=[]{};':\"",./<>?\|`~""), ""is a test sentence"")
        self.assertEqual(words_in_sentence(""This is a test sentence with 1234567890 numbers and special characters !@#$%^&*()_+-=[]{};':\"",./<>?\|`~ and punctuation marks""), ""is a test sentence"")
        self.assertEqual(words_in_sentence(""This is a test sentence with 1234567890 numbers and special characters !@#$%^&*()_+-=[]{};':\"",./<>?\|`~ and punctuation marks.""), ""is a test sentence"")
        self.assertEqual(words_in_sentence(""This is a test sentence with 1234567890 numbers and special characters !@#$%^&*()_+-=[]{};':\"",./<>?\|`~ and punctuation marks.""), ""is a test sentence"")
        self.assertEqual(words_in_sentence(""This is a test sentence with 1234567890 numbers and special characters !@#$%^&*()_+-=[]{};':\"",./<>?\|`~ and punctuation marks.""), ""is a test sentence"")
        self.assertEqual(words_in_sentence(""This is a test sentence with 1234567890 numbers and special characters !@#$%^&*()_+-=[]{};':\"",./<>?\|`~ and punctuation marks.""), ""is a test sentence"")
        self.assertEqual(words_in_sentence(""This is a test sentence with 1234567890 numbers and special characters !@#$%^&*()_+-=[]{};':\"",./<>?\|`~ and punctuation marks.""), ""is a test sentence"")
        self.assertEqual(words_in_sentence(""This is a test sentence with 1234567890 numbers and special characters !@#$%^&*()_+-=[]{};':\"",./<>?\|`~ and punctuation marks.""), ""is a test sentence"")
        self.assertEqual(words_in_sentence(""This is a test sentence with 1234567890 numbers and special characters !@#$%^&*()_+-=[]{};':\"",./<>?\|`~ and punctuation marks.""), ""is a test sentence"")
        self.assertEqual(words_in_sentence(""This is a test sentence with 1234567890 numbers and special characters !@#$%^&*()_+-=[]{};':\"",./<>?\|`~ and punctuation marks.""), ""is a test sentence"")
        self.assertEqual(words_in_sentence(""This is a test sentence with 1234567890 numbers and special characters !@#$%^&*()_+-=[]{};':\"",./<>?\|`~ and punctuation marks.""), ""is a test sentence"")
        self.assertEqual(words_in_sentence(""This is a test sentence with 1234567890 numbers and special characters !@#$%^&*()_+-=[]{};':\"",./<>?\|`~ and punctuation marks.""), ""is a test sentence"")
"
"
def simplify(x, n):
    """"""Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify(""1/5"", ""5/1"") = True
    simplify(""1/6"", ""2/1"") = False
    simplify(""7/10"", ""10/2"") = False
    """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","import unittest

class TestSimplify(unittest.TestCase):
    def test_simplify(self):
        self.assertTrue(simplify(""1/5"", ""5/1""))
        self.assertFalse(simplify(""1/6"", ""2/1""))
        self.assertFalse(simplify(""7/10"", ""10/2""))

"
"
def order_by_points(nums):
    """"""
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","import unittest
class TestOrderByPoints(unittest.TestCase):
    def test_order_by_points(self):
        self.assertEqual(order_by_points([1, 11, -1, -11, -12]), [-1, -11, 1, -12, 11])
        self.assertEqual(order_by_points([]), [])
        self.assertEqual(order_by_points([-100, 100, 1000]), [-100, 100, 1000])
        self.assertEqual(order_by_points([123456789, -123456789]), [-123456789, 123456789])
        self.assertEqual(order_by_points([-1000000000, 1000000000]), [-1000000000, 1000000000])
        self.assertEqual(order_by_points([1234567890, -1234567890]), [-1234567890, 1234567890])
        self.assertEqual(order_by_points([-1000000000000000000, 1000000000000000000]), [-1000000000000000000, 1000000000000000000])
        self.assertEqual(order_by_points([-1234567890123456789, 1234567890123456789]), [-1234567890123456789, 1234567890123456789])
        self.assertEqual(order_by_points([-1000000000000000000000000000000, 1000000000000000000000000000000]), [-1000000000000000000000000000000, 1000000000000000000000000000000])
        self.assertEqual(order_by_points([-12345678901234567890123456789, 12345678901234567890123456789]), [-12345678901234567890123456789, 12345678901234567890123456789])
        self.assertEqual(order_by_points([-1000000000000000000000000000000000, 100000000000000000000000000000000]), [-100000000000000000000000000000000, 100000000000000000000000000000000])
"
"
def specialFilter(nums):
    """"""Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","import unittest
class Test(unittest.TestCase):
    def test_specialFilter(self):
        self.assertEqual(specialFilter([15, -73, 14, -15]), 1)
        self.assertEqual(specialFilter([33, -2, -3, 45, 21, 109]), 2)
        self.assertEqual(specialFilter([-15, 14, 15, 73, -73]), 0)
        self.assertEqual(specialFilter([15, 14, 15, 73, -73]), 2)
        self.assertEqual(specialFilter([-15, -14, -15, -73, -73]), 0)
        self.assertEqual(specialFilter([15, 14, 15, 73, 73]), 2)
        self.assertEqual(specialFilter([-15, -14, -15, -73, 73]), 0)
        self.assertEqual(specialFilter([15, 14, 15, 73, 73]), 2)
        self.assertEqual(specialFilter([-15, -14, -15, 73, 73]), 0)
        self.assertEqual(specialFilter([15, 14, 15, 73, 73]), 2)
        self.assertEqual(specialFilter([-15, -14, -15, 73, 73]), 0)
        "
"
def get_max_triples(n):
    """"""
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","import unittest
class TestGetMaxTriples(unittest.TestCase):
    def test_get_max_triples(self):
        self.assertEqual(get_max_triples(5), 1)
        self.assertEqual(get_max_triples(6), 2)
        self.assertEqual(get_max_triples(7), 3)
        self.assertEqual(get_max_triples(8), 4)
        self.assertEqual(get_max_triples(9), 5)
        self.assertEqual(get_max_triples(10), 6)
        self.assertEqual(get_max_triples(11), 7)
        self.assertEqual(get_max_triples(12), 8)
        self.assertEqual(get_max_triples(13), 9)
        self.assertEqual(get_max_triples(14), 10)
        self.assertEqual(get_max_triples(15), 11)

"
"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","import unittest
class Test(unittest.TestCase):
    def test_bf(self):
        self.assertEqual(bf(""Jupiter"", ""Neptune""), (""Saturn"", ""Uranus""))
        self.assertEqual(bf(""Earth"", ""Mercury""), (""Venus""))
        self.assertEqual(bf(""Mercury"", ""Uranus""), (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""))
        self.assertEqual(bf(""Neptune"", ""Mercury""), ())
        self.assertEqual(bf(""Pluto"", ""Mercury""), ())
        self.assertEqual(bf(""Earth"", ""Earth""), ())
        self.assertEqual(bf(""Jupiter"", ""Jupiter""), ())
        self.assertEqual(bf(""Saturn"", ""Uranus""), (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""))
        self.assertEqual(bf(""Mercury"", ""Mercury""), ())
        self.assertEqual(bf(""Neptune"", ""Neptune""), ())
        self.assertEqual(bf(""Pluto"", ""Pluto""), ())
"
"
def sorted_list_sum(lst):
    """"""Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort([""aa"", ""a"", ""aaa""]) => [""aa""]
    assert list_sort([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]
    """"""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","import unittest
class TestSortedListSum(unittest.TestCase):
    def test_sorted_list_sum(self):
        self.assertEqual(sorted_list_sum(['aa', 'a', 'aaa']), ['aa'])
        self.assertEqual(sorted_list_sum(['ab', 'a', 'aaa', 'cd']), ['ab', 'cd'])
        self.assertEqual(sorted_list_sum(['ab', 'a', 'aaa', 'cd', 'c']), ['ab', 'cd'])
        self.assertEqual(sorted_list_sum(['ab', 'a', 'aaa', 'cd', 'c', 'b']), ['ab', 'cd'])
        self.assertEqual(sorted_list_sum(['ab', 'a', 'aaa', 'cd', 'c', 'b', 'bb']), ['ab', 'cd'])
        self.assertEqual(sorted_list_sum(['ab', 'a', 'aaa', 'cd', 'c', 'b', 'bb', 'ba']), ['ab', 'cd'])
        self.assertEqual(sorted_list_sum(['ab', 'a', 'aaa', 'cd', 'c', 'b', 'bb', 'ba', 'ac']), ['ab', 'cd'])
        self.assertEqual(sorted_list_sum(['ab', 'a', 'aaa', 'cd', 'c', 'b', 'bb', 'ba', 'ac', 'ad']), ['ab', 'cd'])
        self.assertEqual(sorted_list_sum(['ab', 'a', 'aaa', 'cd', 'c', 'b', 'bb', 'ba', 'ac', 'ad', 'ae']), ['ab', 'cd'])
"
"
def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","import unittest

class Test(unittest.TestCase):
    def test_x_or_y(self):
        self.assertEqual(x_or_y(7, 34, 12), 34)
        self.assertEqual(x_or_y(15, 8, 5), 5)
        self.assertEqual(x_or_y(10, 9, 6), 9)
        self.assertEqual(x_or_y(23, 7, 4), 7)
        self.assertEqual(x_or_y(5, 8, 9), 8)
        self.assertEqual(x_or_y(10, 6, 7), 6)
        self.assertEqual(x_or_y(23, 4, 5), 4)
        self.assertEqual(x_or_y(19, 8, 9), 8)
        self.assertEqual(x_or_y(10, 7, 6), 7)
        self.assertEqual(x_or_y(23, 5, 4), 5)
"
"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","import unittest
class TestDoubleTheDifference(unittest.TestCase):
    def test_double_the_difference(self):
        self.assertEqual(double_the_difference([1, 3, 2, 0]), 10)
        self.assertEqual(double_the_difference([-1, -2, 0]), 0)
        self.assertEqual(double_the_difference([9, -2]), 81)
        self.assertEqual(double_the_difference([0]), 0)
        self.assertEqual(double_the_difference([]), 0)
        self.assertEqual(double_the_difference([-1, -2, 3, 4, 5, 6, 7, 8, 9]), 0)
        self.assertEqual(double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]), 100)
        self.assertEqual(double_the_difference([-1, -2, -3, -4, -5, -6, -7, -8, -9]), 0)
        self.assertEqual(double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 100)
        self.assertEqual(double_the_difference([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]), 0)
        "
"
def compare(game,guess):
    """"""I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """"""
","    return [abs(x-y) for x,y in zip(game,guess)]
","import unittest
class TestCompare(unittest.TestCase):
    def test_compare(self):
        self.assertEqual(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),[0,0,0,0,3,3])
        self.assertEqual(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]),[4,4,1,0,0,6])
"
"
def Strongest_Extension(class_name, extensions):
    """"""You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given ""Slices"" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """"""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","import unittest
class TestStrongestExtension(unittest.TestCase):
    def test_strongest_extension(self):
        self.assertEqual(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']), 'Slices.SErviNGSliCes')
        self.assertEqual(Strongest_Extension('my_class', ['AA', 'Be', 'CC']), 'my_class.AA')
        self.assertEqual(Strongest_Extension('my_class', ['aaa', 'bbb', 'ccc']), 'my_class.aaa')
        self.assertEqual(Strongest_Extension('my_class', ['Aaa', 'Bbb', 'Ccc']), 'my_class.Aaa')
        self.assertEqual(Strongest_Extension('my_class', ['AAA', 'BBB', 'CCC']), 'my_class.AAA')
        self.assertEqual(Strongest_Extension('my_class', ['aAa', 'bBb', 'cCc']), 'my_class.aAa')
        self.assertEqual(Strongest_Extension('my_class', ['aaa', 'bbb', 'ccc']), 'my_class.aaa')
        self.assertEqual(Strongest_Extension('my_class', ['AAA', 'BBB', 'CCC']), 'my_class.AAA')
        self.assertEqual(Strongest_Extension('my_class', ['aAa', 'bBb', 'cCc']), 'my_class.aAa')
        self.assertEqual(Strongest_Extension('my_class', ['aaa', 'bbb', 'ccc']), 'my_class.aaa')
        self.assertEqual(Strongest_Extension('my_class', ['AAA', 'BBB', 'CCC']), 'my_class.AAA')
        self.assertEqual(Strongest_Extension('my_class', ['aAa', 'bBb', 'cCc']), 'my_class.aAa')
"
"
def cycpattern_check(a , b):
    """"""You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check(""abcd"",""abd"") => False
    cycpattern_check(""hello"",""ell"") => True
    cycpattern_check(""whassup"",""psus"") => False
    cycpattern_check(""abab"",""baa"") => True
    cycpattern_check(""efef"",""eeff"") => False
    cycpattern_check(""himenss"",""simen"") => True

    """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","import unittest
class Test(unittest.TestCase):
    def test_cycpattern_check(self):
        self.assertEqual(cycpattern_check(""abcd"",""abd""), False)
        self.assertEqual(cycpattern_check(""hello"",""ell""), True)
        self.assertEqual(cycpattern_check(""whassup"",""psus""), False)
        self.assertEqual(cycpattern_check(""abab"",""baa""), True)
        self.assertEqual(cycpattern_check(""efef"",""eeff""), False)
        self.assertEqual(cycpattern_check(""himenss"",""simen""), True)
"
"
def even_odd_count(num):
    """"""Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","import unittest
class TestEvenOddCount(unittest.TestCase):
    def test_even_odd_count(self):
        self.assertEqual((1, 1), even_odd_count(-12))
        self.assertEqual((1, 2), even_odd_count(123))
        self.assertEqual((0, 4), even_odd_count(123456789))
        self.assertEqual((0, 0), even_odd_count(0))
        self.assertEqual((1, 0), even_odd_count(-1))
        self.assertEqual((0, 1), even_odd_count(1))
        self.assertEqual((2, 0), even_odd_count(12))
        self.assertEqual((3, 1), even_odd_count(1234))
        self.assertEqual((0, 5), even_odd_count(-123456789))
"
"
def int_to_mini_roman(number):
    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","import unittest
class Test(unittest.TestCase):
    def test_int_to_mini_roman(self):
        self.assertEqual(int_to_mini_roman(19), 'xix')
        self.assertEqual(int_to_mini_roman(152), 'clii')
        self.assertEqual(int_to_mini_roman(426), 'cdxxvi')
        self.assertEqual(int_to_mini_roman(3999), 'mmcmxcix')
        self.assertEqual(int_to_mini_roman(1000), 'm')
        self.assertEqual(int_to_mini_roman(58), 'lviii')
        self.assertEqual(int_to_mini_roman(99), 'xcix')
        self.assertEqual(int_to_mini_roman(47), 'xlvii')
        self.assertEqual(int_to_mini_roman(123), 'cxxiii')
        self.assertEqual(int_to_mini_roman(900), 'cm')
        self.assertEqual(int_to_mini_roman(400), 'cd')
        self.assertEqual(int_to_mini_roman(100), 'c')
        self.assertEqual(int_to_mini_roman(50), 'l')
        self.assertEqual(int_to_mini_roman(40), 'xl')
        self.assertEqual(int_to_mini_roman(10), 'x')
        self.assertEqual(int_to_mini_roman(9), 'ix')
        self.assertEqual(int_to_mini_roman(5), 'v')
        self.assertEqual(int_to_mini_roman(4), 'iv')
        self.assertEqual(int_to_mini_roman(1), 'i')
        self.assertEqual(int_to_mini_roman(0), '')
        self.assertEqual(int_to_mini_roman(-1), '')
        self.assertEqual(int_to_mini_roman(2), '')
        self.assertEqual(int_to_mini_roman(3), '')
        self.assertEqual(int_to_mini_roman(6), '')
        self.assertEqual(int_to_mini_roman(7), '')
        self.assertEqual(int_to_mini_roman(8), '')
        self.assertEqual(int_to_mini_roman(11), '')
        self.assertEqual(int_to_mini_roman(12), '')
        self.assertEqual(int_to_mini_roman(13), '')
        self.assertEqual(int_to_mini_roman(14), '')
        self.assertEqual(int_to_mini_roman(15), '')
        self.assertEqual(int_to_mini_roman(16), '')
        self.assertEqual(int_to_mini_roman(17), '')
        self.assertEqual(int_to_mini_roman(18), '')
        self.assertEqual(int_to_mini_roman(19), 'xix')
        self.assertEqual(int_to_mini_roman(20), '')
        self.assertEqual(int_to_mini_roman(21), '')
        self.assertEqual(int_to_mini_roman(22), '')
        self.assertEqual(int_to_mini_roman(23), '')
        self.assertEqual(int_to_mini_roman(24), '')
        self.assertEqual(int_to_mini_roman(25), '')
        self.assertEqual(int_to_mini_roman(26), '')
        self.assertEqual(int_to_mini_roman(27), '')
        self.assertEqual(int_to_mini_roman(28), '')
"
"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","import unittest
class Test(unittest.TestCase):
    def test_right_angle_triangle(self):
        self.assertTrue(right_angle_triangle(3, 4, 5))
        self.assertFalse(right_angle_triangle(1, 2, 3))
        self.assertTrue(right_angle_triangle(10, 8, 11))
        self.assertFalse(right_angle_triangle(10, 8, 9))
        self.assertTrue(right_angle_triangle(5, 6, 7))
        self.assertFalse(right_angle_triangle(5, 6, 8))
        self.assertTrue(right_angle_triangle(3, 4, 5))
        self.assertFalse(right_angle_triangle(1, 2, 3))
        self.assertTrue(right_angle_triangle(10, 8, 11))
        self.assertFalse(right_angle_triangle(10, 8, 9))
        self.assertTrue(right_angle_triangle(5, 6, 7))
        self.assertFalse(right_angle_triangle(5, 6, 8))
"
"
def find_max(words):
    """"""Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max([""name"", ""of"", ""string""]) == ""string""
    find_max([""name"", ""enam"", ""game""]) == ""enam""
    find_max([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa""
    """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","import unittest
class TestFindMax(unittest.TestCase):
    def test_find_max(self):
        self.assertEqual(find_max([""name"", ""of"", ""string""]), ""string"")
        self.assertEqual(find_max([""name"", ""enam"", ""game""]), ""enam"")
        self.assertEqual(find_max([""aaaaaaa"", ""bb"" ,""cc""]), ""aaaaaaa"")
        self.assertEqual(find_max([""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""]), ""abcde"")
        self.assertEqual(find_max([""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""]), ""abcde"")
        self.assertEqual(find_max([""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""]), ""abcde"")
        self.assertEqual(find_max([""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""]), ""abcde"")
        self.assertEqual(find_max([""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""]), ""abcde"")
        self.assertEqual(find_max([""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""]), ""abcde"")
        self.assertEqual(find_max([""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""]), ""abcde"")
        self.assertEqual(find_max([""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""]), ""abcde"")
"
"
def eat(number, need, remaining):
    """"""
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","import unittest
class Test(unittest.TestCase):
    def test_eat(self):
        self.assertEqual(eat(5,6,10),[11,4])
        self.assertEqual(eat(4,8,9),[12,1])
        self.assertEqual(eat(1,10,10),[11,0])
        self.assertEqual(eat(2,11,5),[7,0])
"
"
def do_algebra(operator, operand):
    """"""
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","import unittest
class TestAlgebra(unittest.TestCase):
    def test_do_algebra(self):
        self.assertEqual(do_algebra(['+', '*', '-'], [2, 3, 4, 5]), 9)
        self.assertEqual(do_algebra(['-', '/', '**'], [10, 2, 3]), -16)
        self.assertEqual(do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5]), 9)
        self.assertEqual(do_algebra(['-', '/', '**'], [10, 2, 3, 4, 5]), -16)
        self.assertEqual(do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5, 6]), 9)
        self.assertEqual(do_algebra(['-', '/', '**'], [10, 2, 3, 4, 5, 6]), -16)
        self.assertEqual(do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5, 6, 7]), 9)
        self.assertEqual(do_algebra(['-', '/', '**'], [10, 2, 3, 4, 5, 6, 7]), -16)
        self.assertEqual(do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5, 6, 7, 8]), 9)
        self.assertEqual(do_algebra(['-', '/', '**'], [10, 2, 3, 4, 5, 6, 7, 8]), -16)
"
"
def solve(s):
    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","import unittest


class TestSolution(unittest.TestCase):
    def test_solve(self):
        self.assertEqual(solve(""1234""), ""4321"")
        self.assertEqual(solve(""ab""), ""AB"")
        self.assertEqual(solve(""#a@C""), ""#A@c"")
        self.assertEqual(solve(""""), """")
        self.assertEqual(solve(""abcdefghijklmnopqrstuvwxyz""), ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"")
        self.assertEqual(solve(""1234567890""), ""0987654321"")
"
"
def string_to_md5(text):
    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","class TestStringToMD5:
    def test_string_to_md5(self):
        self.assertEqual(string_to_md5('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')
        self.assertIsNone(string_to_md5(''))

    def test_string_to_md5_empty_string(self):
        self.assertEqual(string_to_md5(''), None)

    def test_string_to_md5_hello_world(self):
        self.assertEqual(string_to_md5('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')

    def test_string_to_md5_empty_string(self):
        self.assertEqual(string_to_md5(''), None)

    def test_string_to_md5_hello_world(self):
        self.assertEqual(string_to_md5('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')

    def test_string_to_md5_empty_string(self):
        self.assertEqual(string_to_md5(''), None)

    def test_string_to_md5_hello_world(self):
        self.assertEqual(string_to_md5('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')

    def test_string_to_md5_empty_string(self):
        self.assertEqual(string_to_md5(''), None)

    def test_string_to_md5_hello_world(self):
        self.assertEqual(string_to_md5('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')

    def test_string_to_md5_empty_string(self):
        self.assertEqual(string_to_md5(''), None)

    def test_string_to_md5_hello_world(self):
        self.assertEqual(string_to_md5('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')

    def test_string_to_md5_empty_string(self):
        self.assertEqual(string_to_md5(''), None)

    def test_string_to_md5_hello_world(self):
        self.assertEqual(string_to_md5('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')

    def test_string_to_md5_empty_string(self):
        self.assertEqual(string_to_md5(''), None)

    def test_string_to_md5_hello_world(self):
        self.assertEqual(string_to_md5('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')

    def test_string_to_md5_empty_string(self):
        self.assertEqual(string_to_md5(''), None)

    def test_string_to_md5_hello_world(self):
        self.assertEqual(string_to_md5('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')

    def test_string_to_md5_empty_string(self):
        self.assertEqual(string_to_md5(''), None)

    def test_string_to_md5_hello_world(self):
        self.assertEqual(string_to_md5('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')
"
"
def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","import unittest

class TestGenerateIntegers(unittest.TestCase):
    def test_generate_integers(self):
        self.assertEqual(generate_integers(2, 8), [2, 4, 6, 8])
        self.assertEqual(generate_integers(8, 2), [2, 4, 6, 8])
        self.assertEqual(generate_integers(10, 14), [])
        self.assertEqual(generate_integers(5, 7), [])
        self.assertEqual(generate_integers(3, 3), [])
        self.assertEqual(generate_integers(2, 2), [])
        self.assertEqual(generate_integers(10, 8), [])
        self.assertEqual(generate_integers(5, 4), [])
        self.assertEqual(generate_integers(3, 1), [])
        self.assertEqual(generate_integers(2, 1), [])
        self.assertEqual(generate_integers(8, 7), [])
        self.assertEqual(generate_integers(6, 5), [])
        self.assertEqual(generate_integers(4, 3), [])
        self.assertEqual(generate_integers(2, 0), [])
        self.assertEqual(generate_integers(1, 0), [])
        self.assertEqual(generate_integers(8, 6), [])
        self.assertEqual(generate_integers(7, 5), [])
        self.assertEqual(generate_integers(3, 2), [])
        self.assertEqual(generate_integers(1, 0), [])
        self.assertEqual(generate_integers(8, 6), [])
        self.assertEqual(generate_integers(7, 5), [])
        self.assertEqual(generate_integers(3, 2), [])
        self.assertEqual(generate_integers(1, 0), [])
        self.assertEqual(generate_integers(8, 6), [])
        self.assertEqual(generate_integers(7, 5), [])
        self.assertEqual(generate_integers(3, 2), [])
        self.assertEqual(generate_integers(1, 0), [])
        self.assertEqual(generate_integers(8, 6), [])
        self.assertEqual(generate_integers(7, 5), [])
        self.assertEqual(generate_integers(3, 2), [])
        self.assertEqual(generate_integers(1, 0), [])
        self.assertEqual(generate_integers(8, 6), [])
        self.assertEqual(generate_integers(7, 5), [])
        self.assertEqual(generate_integers(3, 2), [])
        self.assertEqual(generate_integers(1, 0), [])
        self.assertEqual(generate_integers(8, 6), [])
        self.assertEqual(generate_integers(7, 5), [])
        self.assertEqual(generate_integers(3, 2), [])
        self.assertEqual(generate_integers(1, 0), [])
        self.assertEqual(generate_integers(8, 6), [])
        self.assertEqual(generate_integers(7, 5), [])
        self.assertEqual(generate_integers(3, 2), [])
        self.assertEqual(generate_integers(1, 0), [])
        self.assertEqual(generate_integers(8, 6), [])
        self.assertEqual(generate_integers(7, 5), [])
        self.assertEqual(generate_integers(3, 2), [])
        self.assertEqual(generate_integers(1, 0), [])
        self.assertEqual(generate_integers(8, 6), [])
        self.assertEqual(generate_integers(7, 5), [])
        self.assertEqual(generate_integers(3, 2), [])
        self.assertEqual(generate_integers(1, 0), [])"
